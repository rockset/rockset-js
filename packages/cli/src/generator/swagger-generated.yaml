---
swagger: "2.0"
info:
  description: "Rockset's REST API allows for creating and managing all resources\
    \ in Rockset. Each supported endpoint is documented below.\n\nAll requests must\
    \ be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com).\
    \ The API key must be provided as `ApiKey <api_key>` in the `Authorization` request\
    \ header. For example:\n```\nAuthorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT\n\
    ```\n\nAll endpoints are only accessible via https.\n\nBuild something awesome!"
  version: "v1"
  title: "REST API"
host: "api.use1a1.rockset.com"
tags:
- name: "API Keys"
- name: "Aliases"
- name: "Collections"
- name: "Custom Roles"
- name: "Documents"
- name: "Integrations"
- name: "Organizations"
- name: "Queries"
- name: "Query Lambdas"
- name: "Shared Lambdas"
- name: "Users"
- name: "Views"
- name: "Virtual Instances"
- name: "Workspaces"
schemes:
- "https"
paths:
  /v1/orgs/self:
    get:
      tags:
      - "Organizations"
      summary: "Get Organization"
      description: "Retrieve information about current organization."
      operationId: "getOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "organization retrieved successfully"
          schema:
            $ref: "#/definitions/OrganizationResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
  /v1/orgs/self/aliases:
    get:
      tags:
      - "Aliases"
      summary: "List Aliases"
      description: "Retrieve all aliases in an organization"
      operationId: "listAliases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "aliases retrieved successfully"
          schema:
            $ref: "#/definitions/ListAliasesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
  /v1/orgs/self/collections:
    get:
      tags:
      - "Collections"
      summary: "List Collections"
      description: "Retrieve all collections in an organization."
      operationId: "listCollections"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "collections retrieved successfully"
          schema:
            $ref: "#/definitions/ListCollectionsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
  /v1/orgs/self/integrations:
    get:
      tags:
      - "Integrations"
      summary: "List Integrations"
      description: "List all integrations in an organization."
      operationId: "listIntegrations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "integrations retrieved successfully"
          schema:
            $ref: "#/definitions/ListIntegrationsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
    post:
      tags:
      - "Integrations"
      summary: "Create Integration"
      description: "Create a new integration."
      operationId: "createIntegration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "integration credentials"
        required: true
        schema:
          $ref: "#/definitions/CreateIntegrationRequest"
      responses:
        200:
          description: "integration created successfully"
          schema:
            $ref: "#/definitions/CreateIntegrationResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/integrations/{integration}:
    get:
      tags:
      - "Integrations"
      summary: "Retrieve Integration"
      description: "Retrieve information about a single integration."
      operationId: "getIntegration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "integration"
        in: "path"
        description: "name of the integration"
        required: true
        type: "string"
      responses:
        200:
          description: "integration retrieved successfully"
          schema:
            $ref: "#/definitions/GetIntegrationResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    delete:
      tags:
      - "Integrations"
      summary: "Delete Integration"
      description: "Remove an integration."
      operationId: "deleteIntegration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "integration"
        in: "path"
        description: "name of the integration"
        required: true
        type: "string"
      responses:
        200:
          description: "integration deleted successfully"
          schema:
            $ref: "#/definitions/DeleteIntegrationResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/lambdas:
    get:
      tags:
      - "Query Lambdas"
      summary: "List Query Lambdas"
      description: "List all Query Lambdas in an organization."
      operationId: "listAllQueryLambdas"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Query Lambdas listed successfully"
          schema:
            $ref: "#/definitions/ListQueryLambdasResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/queries:
    get:
      tags:
      - "Queries"
      summary: "List Queries"
      description: "Lists actively queued and running queries."
      operationId: "listActiveQueries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successfully fetched queries"
          schema:
            $ref: "#/definitions/ListQueriesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Queries"
      summary: "Execute SQL Query"
      description: "Make a SQL query to Rockset."
      operationId: "query"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/QueryRequest"
      responses:
        200:
          description: "query executed successfully"
          schema:
            $ref: "#/definitions/QueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/queries/validations:
    post:
      tags:
      - "Queries"
      summary: "Validate Query"
      description: "Validate a SQL query with Rockset's parser and planner."
      operationId: "validate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/QueryRequest"
      responses:
        200:
          description: "query validated successfully"
          schema:
            $ref: "#/definitions/ValidateQueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/queries/{queryId}:
    get:
      tags:
      - "Queries"
      summary: "Retrieve Query"
      description: "Returns information about a query."
      operationId: "getQuery"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queryId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully fetched query info"
          schema:
            $ref: "#/definitions/GetQueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "Queries"
      summary: "Cancel Query"
      description: "Attempts to cancel an actively-running query."
      operationId: "cancelQuery"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queryId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully canceled query"
          schema:
            $ref: "#/definitions/CancelQueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/queries/{queryId}/pages:
    get:
      tags:
      - "Queries"
      summary: "Retrieve Query Results Page"
      description: "Returns a page of query results."
      operationId: "getQueryResults"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queryId"
        in: "path"
        required: true
        type: "string"
      - name: "cursor"
        in: "query"
        description: "Cursor to current page. If unset, will default to the first\
          \ page."
        required: false
        type: "string"
      - name: "docs"
        in: "query"
        description: "Number of documents to fetch."
        required: false
        type: "integer"
        format: "int32"
      - name: "offset"
        in: "query"
        description: "Offset from the cursor of the first document to be returned"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfully fetched query results"
          schema:
            $ref: "#/definitions/QueryPaginationResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/roles:
    get:
      tags:
      - "Custom Roles"
      summary: "List Roles"
      description: "List all roles for your organization."
      operationId: "listRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "roles retrieved successfully"
          schema:
            $ref: "#/definitions/ListRolesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
    post:
      tags:
      - "Custom Roles"
      summary: "Create a Role"
      description: "Create a role for your organization."
      operationId: "createRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON Object"
        required: true
        schema:
          $ref: "#/definitions/CreateRoleRequest"
      responses:
        200:
          description: "role created successfully"
          schema:
            $ref: "#/definitions/RoleResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/roles/{roleName}:
    get:
      tags:
      - "Custom Roles"
      summary: "Retrieve role"
      description: "Retrieve a role by name for your organization."
      operationId: "getRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "role retrieved successfully"
          schema:
            $ref: "#/definitions/RoleResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "Custom Roles"
      summary: "Update a Role"
      description: "Update a role for your organization."
      operationId: "updateRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON Object"
        required: true
        schema:
          $ref: "#/definitions/UpdateRoleRequest"
      responses:
        200:
          description: "role updated successfully"
          schema:
            $ref: "#/definitions/RoleResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "update"
    delete:
      tags:
      - "Custom Roles"
      summary: "Delete a Role"
      description: "Delete a role for your organization."
      operationId: "deleteRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "role deleted successfully"
          schema:
            $ref: "#/definitions/RoleResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/users:
    get:
      tags:
      - "Users"
      summary: "List Users"
      description: "Retrieve all users for an organization."
      operationId: "listUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "users retrieved successfully"
          schema:
            $ref: "#/definitions/ListUsersResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
    post:
      tags:
      - "Users"
      summary: "Create User"
      description: "Create a new user for an organization."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateUserRequest"
      responses:
        200:
          description: "user created successfully"
          schema:
            $ref: "#/definitions/CreateUserResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/users/self:
    get:
      tags:
      - "Users"
      summary: "Retrieve Current User"
      description: "Retrieve currently authenticated user."
      operationId: "getCurrentUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "user retrieved successfully"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/users/self/apikeys:
    post:
      tags:
      - "API Keys"
      summary: "Create API Key"
      description: "Create a new API key for the authenticated user."
      operationId: "createApiKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateApiKeyRequest"
      responses:
        200:
          description: "API key created successfully"
          schema:
            $ref: "#/definitions/CreateApiKeyResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/users/self/preferences:
    get:
      tags:
      - "Users"
      summary: "Retrieve Notification Preferences"
      description: "Get all notification preferences."
      operationId: "listUnsubscribePreferences"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Notification preferences retrieved successfully"
          schema:
            $ref: "#/definitions/ListUnsubscribePreferencesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Users"
      summary: "Update Notification Preferences"
      description: "Update notification preference."
      operationId: "updateUnsubscribePreferences"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON Object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUnsubscribePreferencesRequest"
      responses:
        200:
          description: "Notification preference created successfully"
          schema:
            $ref: "#/definitions/UpdateUnsubscribePreferencesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/users/{user}:
    get:
      tags:
      - "Users"
      summary: "Retrieve User"
      description: "Retrieve user by email."
      operationId: "getUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        description: "user email"
        required: true
        type: "string"
      responses:
        200:
          description: "user found"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "Users"
      summary: "Update User"
      description: "Update a user in an organization."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        description: "email of the user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserRequest"
      responses:
        200:
          description: "user updated successfully"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "update"
    delete:
      tags:
      - "Users"
      summary: "Delete User"
      description: "Delete a user from an organization."
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        description: "user email"
        required: true
        type: "string"
      responses:
        200:
          description: "user deleted successfully"
          schema:
            $ref: "#/definitions/DeleteUserResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/users/{user}/apikeys:
    get:
      tags:
      - "API Keys"
      summary: "List API Keys"
      description: "List API key metadata for any user in your organization."
      operationId: "listApiKeys"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        description: "Email of the API key owner. Use `self` to specify the currently\
          \ authenticated user."
        required: true
        type: "string"
        x-example: "admin@me.com"
      responses:
        200:
          description: "API keys retrieved successfully"
          schema:
            $ref: "#/definitions/ListApiKeysResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
  /v1/orgs/self/users/{user}/apikeys/{name}:
    get:
      tags:
      - "API Keys"
      summary: "Retrieve API Key"
      description: "Retrieve a particular API key for any user in your organization."
      operationId: "getApiKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        description: "Email of the API key owner. Use `self` to specify the currently\
          \ authenticated user."
        required: true
        type: "string"
        x-example: "admin@me.com"
      - name: "name"
        in: "path"
        description: "Name of the API key."
        required: true
        type: "string"
        x-example: "my-key"
      - name: "reveal"
        in: "query"
        description: "Reveal full key."
        required: false
        type: "boolean"
        x-example: true
      responses:
        200:
          description: "API key retrieved successfully"
          schema:
            $ref: "#/definitions/GetApiKeyResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "API Keys"
      summary: "Update API Key State"
      description: "Update the state of an API key for any user in your organization."
      operationId: "updateApiKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the API key."
        required: true
        type: "string"
        x-example: "my-key"
      - name: "user"
        in: "path"
        description: "Email of the API key owner. Use `self` to specify the currently\
          \ authenticated user."
        required: true
        type: "string"
        x-example: "admin@me.com"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateApiKeyRequest"
      responses:
        200:
          description: "API key successfully updated"
          schema:
            $ref: "#/definitions/UpdateApiKeyResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "update"
    delete:
      tags:
      - "API Keys"
      summary: "Delete API Key"
      description: "Delete an API key for any user in your organization."
      operationId: "deleteApiKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the API key."
        required: true
        type: "string"
        x-example: "my-key"
      - name: "user"
        in: "path"
        description: "Email of the API key owner. Use `self` to specify the currently\
          \ authenticated user."
        required: true
        type: "string"
        x-example: "admin@me.com"
      responses:
        200:
          description: "API key deleted successfully"
          schema:
            $ref: "#/definitions/DeleteApiKeyResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/views:
    get:
      tags:
      - "Views"
      summary: "List Views"
      description: "Retrieve all views in an organization"
      operationId: "listViews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "views retrieved successfully"
          schema:
            $ref: "#/definitions/ListViewsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
  /v1/orgs/self/virtualinstances:
    get:
      tags:
      - "Virtual Instances"
      summary: "List Virtual Instances"
      description: "Retrieve all virtual instances in an organization."
      operationId: "listVirtualInstances"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "virtual instances retrieved successfully"
          schema:
            $ref: "#/definitions/ListVirtualInstancesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
    post:
      tags:
      - "Virtual Instances"
      summary: "Create Virtual Instance"
      description: "[beta] Create virtual instance"
      operationId: "createVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateVirtualInstanceRequest"
      responses:
        200:
          description: "virtual instance created successfully"
          schema:
            $ref: "#/definitions/CreateVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}:
    get:
      tags:
      - "Virtual Instances"
      summary: "Retrieve Virtual Instance"
      description: "Get details about a virtual instance."
      operationId: "getVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "virtual instance retrieved successfully"
          schema:
            $ref: "#/definitions/GetVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "Virtual Instances"
      summary: "Update Virtual Instance"
      description: "Update the properties of a virtual instance."
      operationId: "setVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateVirtualInstanceRequest"
      responses:
        200:
          description: "virtual instance updated successfully"
          schema:
            $ref: "#/definitions/UpdateVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "update"
    delete:
      tags:
      - "Virtual Instances"
      summary: "Delete Virtual Instance"
      description: "[beta] Delete a virtual instance."
      operationId: "deleteVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "virtual instance deleted successfully"
          schema:
            $ref: "#/definitions/DeleteVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts:
    get:
      tags:
      - "Virtual Instances"
      summary: "List Collection Mounts"
      description: "[beta] List collection mounts for a particular VI."
      operationId: "listCollectionMounts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "resource mounted"
          schema:
            $ref: "#/definitions/ListCollectionMountsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Virtual Instances"
      summary: "Mount Collection"
      description: "[beta] Mount a collection to this virtual instance."
      operationId: "mountCollection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateCollectionMountRequest"
      responses:
        200:
          description: "collection mounted"
          schema:
            $ref: "#/definitions/CreateCollectionMountsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts/{collectionPath}:
    get:
      tags:
      - "Virtual Instances"
      summary: "Get Collection Mount"
      description: "[beta] Get a mount on this virtual instance."
      operationId: "getCollectionMount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      - name: "collectionPath"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "collection unmounted"
          schema:
            $ref: "#/definitions/CollectionMountResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "Virtual Instances"
      summary: "Unmount Collection"
      description: "[beta] Unmount a collection from this virtual instance."
      operationId: "unmountCollection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      - name: "collectionPath"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "collection unmounted"
          schema:
            $ref: "#/definitions/CollectionMountResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/queries:
    get:
      tags:
      - "Virtual Instances"
      summary: "List Queries"
      description: "[beta] Lists actively queued and running queries for a particular\
        \ Virtual Instance."
      operationId: "getVirtualInstanceQueries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully fetched queries"
          schema:
            $ref: "#/definitions/ListQueriesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Virtual Instances"
      summary: "Execute SQL Query"
      description: "[beta] Make a SQL query to Rockset."
      operationId: "queryVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/QueryRequest"
      responses:
        200:
          description: "query executed successfully"
          schema:
            $ref: "#/definitions/QueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/resume:
    post:
      tags:
      - "Virtual Instances"
      summary: "Resume Virtual Instance"
      description: "[beta] Resume a virtual instance."
      operationId: "resumeVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "virtual instance resumed successfully"
          schema:
            $ref: "#/definitions/ResumeVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/suspend:
    post:
      tags:
      - "Virtual Instances"
      summary: "Suspend Virtual Instance"
      description: "[beta] Suspend a virtual instance."
      operationId: "suspendVirtualInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "virtualInstanceId"
        in: "path"
        description: "Virtual Instance RRN"
        required: true
        type: "string"
      responses:
        200:
          description: "virtual instance suspended successfully"
          schema:
            $ref: "#/definitions/SuspendVirtualInstanceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws:
    get:
      tags:
      - "Workspaces"
      summary: "List Workspaces"
      description: "List all workspaces in an organization."
      operationId: "listWorkspaces"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "workspaces retrieved successfully"
          schema:
            $ref: "#/definitions/ListWorkspacesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "list"
    post:
      tags:
      - "Workspaces"
      summary: "Create Workspace"
      description: "Create a new workspace."
      operationId: "createWorkspace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "workspace details"
        required: true
        schema:
          $ref: "#/definitions/CreateWorkspaceRequest"
      responses:
        200:
          description: "workspace created successfully"
          schema:
            $ref: "#/definitions/CreateWorkspaceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/ws/{workspace}:
    get:
      tags:
      - "Workspaces"
      summary: "Retrieve Workspace"
      description: "Get information about a single workspace."
      operationId: "getWorkspace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "workspace retrieved successfully"
          schema:
            $ref: "#/definitions/GetWorkspaceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    delete:
      tags:
      - "Workspaces"
      summary: "Delete Workspace"
      description: "Remove a workspace."
      operationId: "deleteWorkspace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "workspace deleted successfully"
          schema:
            $ref: "#/definitions/DeleteWorkspaceResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/ws/{workspace}/aliases:
    get:
      tags:
      - "Aliases"
      summary: "List Aliases in Workspace"
      description: "Retrieve all aliases in a workspace."
      operationId: "workspaceAliases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "aliases retrieved successfully"
          schema:
            $ref: "#/definitions/ListAliasesResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Aliases"
      summary: "Create Alias"
      description: "Create new alias in a workspace."
      operationId: "createAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateAliasRequest"
      responses:
        200:
          description: "alias created successfully"
          schema:
            $ref: "#/definitions/CreateAliasResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "create"
  /v1/orgs/self/ws/{workspace}/aliases/{alias}:
    get:
      tags:
      - "Aliases"
      summary: "Retrieve Alias"
      description: "Get details about an alias"
      operationId: "getAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "alias"
        in: "path"
        description: "name of the alias"
        required: true
        type: "string"
      responses:
        200:
          description: "alias retrieved successfully"
          schema:
            $ref: "#/definitions/GetAliasResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "Aliases"
      summary: "Update Alias"
      description: "Update alias in a workspace."
      operationId: "updateAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "alias"
        in: "path"
        description: "name of the alias"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateAliasRequest"
      responses:
        200:
          description: "alias updated successfully"
          schema:
            $ref: "#/definitions/GetAliasResponse"
      x-rename: "update"
    delete:
      tags:
      - "Aliases"
      summary: "Delete Alias"
      description: "Delete an alias."
      operationId: "deleteAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "alias"
        in: "path"
        description: "name of the alias"
        required: true
        type: "string"
      responses:
        200:
          description: "alias deleted successfully"
          schema:
            $ref: "#/definitions/DeleteAliasResponse"
      x-rename: "delete"
  /v1/orgs/self/ws/{workspace}/collections:
    get:
      tags:
      - "Collections"
      summary: "List Collections in Workspace"
      description: "Retrieve all collections in a workspace."
      operationId: "workspaceCollections"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "collections retrieved successfully"
          schema:
            $ref: "#/definitions/ListCollectionsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Collections"
      summary: "Create Collection"
      description: "Create new collection in a workspace."
      operationId: "createCollection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateCollectionRequest"
      responses:
        200:
          description: "collection created successfully"
          schema:
            $ref: "#/definitions/CreateCollectionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/collections/{collection}:
    get:
      tags:
      - "Collections"
      summary: "Retrieve Collection"
      description: "Get details about a collection."
      operationId: "getCollection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "collection"
        in: "path"
        description: "name of the collection"
        required: true
        type: "string"
      responses:
        200:
          description: "collection retrieved successfully"
          schema:
            $ref: "#/definitions/GetCollectionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    delete:
      tags:
      - "Collections"
      summary: "Delete Collection"
      description: "Delete a collection and all its documents from Rockset."
      operationId: "deleteCollection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "collection"
        in: "path"
        description: "name of the collection"
        required: true
        type: "string"
      responses:
        200:
          description: "collection deleted successfully"
          schema:
            $ref: "#/definitions/DeleteCollectionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "delete"
  /v1/orgs/self/ws/{workspace}/collections/{collection}/docs:
    post:
      tags:
      - "Documents"
      summary: "Add Documents"
      description: "Add documents to a collection."
      operationId: "addDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "Name of the workspace."
        required: true
        type: "string"
        default: "commons"
      - name: "collection"
        in: "path"
        description: "Name of the collection."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/AddDocumentsRequest"
      responses:
        200:
          description: "documents added successfully"
          schema:
            $ref: "#/definitions/AddDocumentsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        413:
          description: "content too large"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "Documents"
      summary: "Delete Documents"
      description: "Delete documents from a collection."
      operationId: "deleteDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "Name of the workspace."
        required: true
        type: "string"
        default: "commons"
      - name: "collection"
        in: "path"
        description: "Name of the collection."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/DeleteDocumentsRequest"
      responses:
        200:
          description: "documents deleted successfully"
          schema:
            $ref: "#/definitions/DeleteDocumentsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    patch:
      tags:
      - "Documents"
      summary: "Patch Documents"
      description: "Update existing documents in a collection."
      operationId: "patchDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "Name of the workspace."
        required: true
        type: "string"
        default: "commons"
      - name: "collection"
        in: "path"
        description: "Name of the collection."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON Patch objects"
        required: true
        schema:
          $ref: "#/definitions/PatchDocumentsRequest"
      responses:
        200:
          description: "Documents patched successfully"
          schema:
            $ref: "#/definitions/PatchDocumentsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        413:
          description: "content too large"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas:
    get:
      tags:
      - "Query Lambdas"
      summary: "List Query Lambdas in Workspace"
      description: "List all Query Lambdas under given workspace."
      operationId: "listQueryLambdasInWorkspace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "Query Lambdas listed successfully"
          schema:
            $ref: "#/definitions/ListQueryLambdasResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Query Lambdas"
      summary: "Create Query Lambda"
      description: "Create a Query Lambda in given workspace."
      operationId: "createQueryLambda"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateQueryLambdaRequest"
      responses:
        200:
          description: "Query Lambda created successfully"
          schema:
            $ref: "#/definitions/QueryLambdaVersionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}:
    delete:
      tags:
      - "Query Lambdas"
      summary: "Delete Query Lambda"
      description: "Delete a Query Lambda."
      operationId: "deleteQueryLambda"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      responses:
        200:
          description: "Query Lambda deleted successfully"
          schema:
            $ref: "#/definitions/DeleteQueryLambdaResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags:
    get:
      tags:
      - "Query Lambdas"
      summary: "List Query Lambda Tags"
      description: "List all tags associated with a Query Lambda"
      operationId: "listQueryLambdaTags"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      responses:
        200:
          description: "tags listed successfully"
          schema:
            $ref: "#/definitions/ListQueryLambdaTagsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Query Lambdas"
      summary: "Create Query Lambda Tag"
      description: "Create a tag for a specific Query Lambda version, or update that\
        \ tag if it already exists."
      operationId: "createQueryLambdaTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateQueryLambdaTagRequest"
      responses:
        200:
          description: "tag created successfully"
          schema:
            $ref: "#/definitions/QueryLambdaTagResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}:
    get:
      tags:
      - "Query Lambdas"
      summary: "Retrieve Query Lambda Tag"
      description: "Retrieve the Query Lambda version associated with a given tag."
      operationId: "getQueryLambdaTagVersion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "tag"
        in: "path"
        description: "name of the tag"
        required: true
        type: "string"
      responses:
        200:
          description: "version retrieved successfully"
          schema:
            $ref: "#/definitions/QueryLambdaTagResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Query Lambdas"
      summary: "Execute Query Lambda By Tag"
      description: "Execute the Query Lambda version associated with a given tag."
      operationId: "executeQueryLambdaByTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "tag"
        in: "path"
        description: "tag"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: false
        schema:
          $ref: "#/definitions/ExecuteQueryLambdaRequest"
      responses:
        200:
          description: "Query Lambda executed successfully"
          schema:
            $ref: "#/definitions/QueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "Query Lambdas"
      summary: "Delete Query Lambda Tag Version"
      description: "Delete a tag for a specific Query Lambda"
      operationId: "deleteQueryLambdaTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "tag"
        in: "path"
        description: "name of the tag"
        required: true
        type: "string"
      responses:
        200:
          description: "tag deleted successfully"
          schema:
            $ref: "#/definitions/QueryLambdaTagResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}:
    delete:
      tags:
      - "Query Lambdas"
      summary: "Delete Query Lambda Version"
      description: "Delete a Query Lambda version."
      operationId: "deleteQueryLambdaVersion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version"
        required: true
        type: "string"
      responses:
        200:
          description: "Query Lambda version deleted successfully"
          schema:
            $ref: "#/definitions/QueryLambdaVersionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions:
    get:
      tags:
      - "Query Lambdas"
      summary: "List Query Lambda Versions"
      description: "List all versions of a Query Lambda."
      operationId: "listQueryLambdaVersions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      responses:
        200:
          description: "versions listed successfully"
          schema:
            $ref: "#/definitions/ListQueryLambdaVersionsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Query Lambdas"
      summary: "Update Query Lambda"
      description: "Create a new version of a Query Lambda in given workspace."
      operationId: "updateQueryLambda"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateQueryLambdaRequest"
      - name: "create"
        in: "query"
        description: "Create a new Query Lambda if one does not exist already."
        required: false
        type: "boolean"
      responses:
        200:
          description: "Query Lambda updated successfully"
          schema:
            $ref: "#/definitions/QueryLambdaVersionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}:
    get:
      tags:
      - "Query Lambdas"
      summary: "Retrieve Query Lambda Version"
      description: "Retrieve details for a specified version of a Query Lambda."
      operationId: "getQueryLambdaVersion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version"
        required: true
        type: "string"
      responses:
        200:
          description: "Query Lambda retrieved successfully"
          schema:
            $ref: "#/definitions/QueryLambdaVersionResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Query Lambdas"
      summary: "Execute Query Lambda By Version"
      description: "Execute a particular version of a Query Lambda."
      operationId: "executeQueryLambda"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "queryLambda"
        in: "path"
        description: "name of the Query Lambda"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: false
        schema:
          $ref: "#/definitions/ExecuteQueryLambdaRequest"
      responses:
        200:
          description: "Query Lambda executed successfully"
          schema:
            $ref: "#/definitions/QueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
  /v1/orgs/self/ws/{workspace}/views:
    get:
      tags:
      - "Views"
      summary: "List Views in Workspace"
      description: "Retrieve all views in a workspace."
      operationId: "workspaceViews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      responses:
        200:
          description: "views retrieved successfully"
          schema:
            $ref: "#/definitions/ListViewsResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      tags:
      - "Views"
      summary: "Create View"
      description: "Create a view"
      operationId: "createView"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/CreateViewRequest"
      responses:
        200:
          description: "view created successfully"
          schema:
            $ref: "#/definitions/CreateViewResponse"
      x-rename: "create"
  /v1/orgs/self/ws/{workspace}/views/{view}:
    get:
      tags:
      - "Views"
      summary: "Retrieve View"
      description: "Get details about a view"
      operationId: "getView"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "view"
        in: "path"
        description: "name of the view"
        required: true
        type: "string"
      responses:
        200:
          description: "view retrieved successfully"
          schema:
            $ref: "#/definitions/GetViewResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-rename: "get"
    post:
      tags:
      - "Views"
      summary: "Update View"
      description: "Update a view"
      operationId: "updateView"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "view"
        in: "path"
        description: "name of the view"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: true
        schema:
          $ref: "#/definitions/UpdateViewRequest"
      responses:
        200:
          description: "view updated successfully"
          schema:
            $ref: "#/definitions/UpdateViewResponse"
      x-rename: "update"
    delete:
      tags:
      - "Views"
      summary: "Delete View"
      description: "Delete a view"
      operationId: "deleteView"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workspace"
        in: "path"
        description: "name of the workspace"
        required: true
        type: "string"
        default: "commons"
      - name: "view"
        in: "path"
        description: "name of the view"
        required: true
        type: "string"
      responses:
        200:
          description: "view deleted successfully"
          schema:
            $ref: "#/definitions/DeleteViewResponse"
      x-rename: "delete"
  /v1/public/shared_lambdas/{public_access_id}:
    post:
      tags:
      - "Shared Lambdas"
      summary: "Execute a Public Query Lambda"
      description: "Execute a public query lambda (full version)."
      operationId: "executePublicQueryLambdaWithParams"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "public_access_id"
        in: "path"
        description: "public access ID of the query lambda"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON object"
        required: false
        schema:
          $ref: "#/definitions/ExecutePublicQueryLambdaRequest"
      responses:
        200:
          description: "Query Lambda executed successfully"
          schema:
            $ref: "#/definitions/QueryResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ErrorModel"
        403:
          description: "forbidden"
          schema:
            $ref: "#/definitions/ErrorModel"
        404:
          description: "not found"
          schema:
            $ref: "#/definitions/ErrorModel"
        405:
          description: "not allowed"
          schema:
            $ref: "#/definitions/ErrorModel"
        406:
          description: "not acceptable"
          schema:
            $ref: "#/definitions/ErrorModel"
        408:
          description: "request timeout"
          schema:
            $ref: "#/definitions/ErrorModel"
        415:
          description: "not supported"
          schema:
            $ref: "#/definitions/ErrorModel"
        429:
          description: "resource exceeded"
          schema:
            $ref: "#/definitions/ErrorModel"
        500:
          description: "internal error"
          schema:
            $ref: "#/definitions/ErrorModel"
        501:
          description: "not implemented"
          schema:
            $ref: "#/definitions/ErrorModel"
        502:
          description: "bad gateway"
          schema:
            $ref: "#/definitions/ErrorModel"
        503:
          description: "not ready"
          schema:
            $ref: "#/definitions/ErrorModel"
definitions:
  AddDocumentsRequest:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "array"
        example: "[{ \"field\": \"value\" }]"
        description: "Array of documents to be added to the collection."
        items:
          type: "object"
  AddDocumentsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Information about the added documents."
        items:
          $ref: "#/definitions/DocumentStatus"
  Alias:
    type: "object"
    properties:
      name:
        type: "string"
        example: "demo"
        description: "Name of the alias."
      description:
        type: "string"
        example: "alias referencing collection in workspace"
        description: "Alias description."
      workspace:
        type: "string"
        example: "commons"
        description: "Name of the workspace."
      creator_email:
        type: "string"
        example: "xyz@rockset.com"
        description: "Email of the creator."
      collections:
        type: "array"
        example: "[\"commons.foo\", \"prod.demo\"]"
        description: "List of fully qualified collection names referenced by alias."
        items:
          type: "string"
      state:
        type: "string"
        example: "CREATED"
        description: "State of the alias."
        enum:
        - "CREATED"
        - "DELETED"
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      modified_at:
        type: "string"
        example: "2001-08-28T00:23:42Z"
        description: "ISO-8601 date."
  ApiKey:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Date that API key was created (ISO-8601 format)."
      name:
        type: "string"
        example: "my-key"
        description: "Name of the API key."
      key:
        type: "string"
        example: "aB35kDjg*******************************"
        description: "API key string of 64 alphanumeric characters."
      last_access_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Date that API key was most recently used (ISO-8601 format)."
      expiry_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "The expiration date of this API key."
      role:
        type: "string"
        example: "read-only"
        description: "Role specifying access control. If not specified, API key will\
          \ have access to all of the associated user's roles."
      created_by:
        type: "string"
        example: "test@rockset.com"
        description: "Email of API key owner."
      state:
        type: "string"
        example: "ACTIVE"
        description: "Current state of this key."
        enum:
        - "ACTIVE"
        - "SUSPENDED"
    description: "API keys are used to authenticate requests to Rockset's API. An\
      \ API key is tied to the user who creates it."
  AsyncQueryOptions:
    type: "object"
    properties:
      client_timeout_ms:
        type: "integer"
        format: "int64"
        description: "The maximum amount of time that the client is willing to wait\
          \ for the query to complete. If the query is not complete by this timeout,\
          \ a response will be returned with a `query_id` that can be used to check\
          \ the status of the query and retrieve results once the query has completed."
      timeout_ms:
        type: "integer"
        format: "int64"
        description: "The maximum amount of time that the system will attempt to complete\
          \ query execution before aborting the query and returning an error."
      max_initial_results:
        type: "integer"
        format: "int64"
        description: "The maximum number of results you will receive as a client.\
          \ If the query exceeds this limit, the remaining results can be requested\
          \ using a returned pagination cursor. In addition, there is a maximum response\
          \ size of 100MiB so fewer than `max_results` may be returned."
  AvroParams:
    type: "object"
  AwsAccessKey:
    type: "object"
    required:
    - "aws_access_key_id"
    - "aws_secret_access_key"
    properties:
      aws_access_key_id:
        type: "string"
        example: "AKIAIOSFODNN7EXAMPLE"
        description: "AWS access key ID."
      aws_secret_access_key:
        type: "string"
        example: "wJal...."
        description: "AWS secret access key."
  AwsRole:
    type: "object"
    required:
    - "aws_role_arn"
    properties:
      aws_role_arn:
        type: "string"
        example: "arn:aws:iam::2378964092:role/rockset-role"
        description: "ARN of rockset-role created in your account."
      aws_external_id:
        type: "string"
        example: "external id of aws"
        description: "External id used for integration."
  AzureBlobStorageIntegration:
    type: "object"
    required:
    - "connection_string"
    properties:
      connection_string:
        type: "string"
        example: "BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;\nSharedAccessSignature=<KeyValue>"
        description: "Credentials for the Azure Blob Service."
  AzureEventHubsIntegration:
    type: "object"
    properties:
      connection_string:
        type: "string"
        example: "Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>"
        description: "Credentials for the Azure Event Hubs."
  AzureServiceBusIntegration:
    type: "object"
    required:
    - "connection_string"
    properties:
      connection_string:
        type: "string"
        example: "Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>"
        description: "Credentials for the Azure Service Bus."
  BulkStats:
    type: "object"
    properties:
      started_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the bulk ingest was started."
      initializing_stage_done_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the initializing stage was completed."
      downloading_stage_done_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the downloading stage was completed."
      provisioning_stage_done_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the provisioning stage was completed."
      indexing_stage_done_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the indexing stage was completed."
      finalizing_stage_done_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the finalizing stage was completed."
      documents_downloaded:
        type: "integer"
        format: "int64"
        example: 10000
        description: "Number of documents downloaded from source during an ongoing\
          \ or completed bulk ingest. This includes documents that are dropped and\
          \ reingested."
      data_downloaded_bytes:
        type: "integer"
        format: "int64"
        example: 10000000
        description: "Size in bytes of documents downloaded from source during an\
          \ ongoing or completed bulk ingest. This includes documents that are dropped\
          \ and reingested."
      download_compute_ms:
        type: "integer"
        format: "int64"
        example: 50000
        description: "Bulk ingest compute units in milliseconds used for downloading\
          \ documents."
      data_indexed_bytes:
        type: "integer"
        format: "int64"
        example: 8000000
        description: "Size in bytes of documents indexed. This is the total size of\
          \ documents after transformations and dropping before indexes are built."
      index_compute_ms:
        type: "integer"
        format: "int64"
        example: 100000
        description: "Bulk ingest compute units in milliseconds used for indexing\
          \ documents."
      total_index_size_bytes:
        type: "integer"
        format: "int64"
        example: 10000000
        description: "Total size of indexes after the completed bulk ingest. This\
          \ is the same as collection size."
      data_indexed_throughput_bytes:
        type: "number"
        format: "double"
        example: 800000.5
        description: "Throughput of documents indexed in the last minute measured\
          \ in bytes/s. This is based off the data_indexed_bytes size. Throughput\
          \ during the download stage is shown on a per-source granularity in the\
          \ sources field of the Collection response."
  CancelQueryResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/QueryInfo"
  Cluster:
    type: "object"
    properties:
      id:
        type: "string"
        example: "asdf98-as9df8adf-adsf9asfd"
        description: "Unique identifier for the cluster."
      cluster_type:
        type: "string"
        example: "PRIVATE"
        description: "Cluster type."
        enum:
        - "PUBLIC"
      aws_region:
        type: "string"
        example: "us-west-2"
        description: "Aws region."
      domain:
        type: "string"
        example: "rockset"
        description: "Domain of org using cluster."
      top_level_domain:
        type: "string"
        example: ".com"
        description: "Top level domain of org using cluster."
      apiserver_url:
        type: "string"
        example: "api.rockset.us-west-2.rockset.com"
        description: "Api server url for cluster."
  Collection:
    type: "object"
    properties:
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      created_by:
        type: "string"
        example: "hello@rockset.com"
        description: "Email of user who created the collection."
      name:
        type: "string"
        example: "global-transactions"
        description: "Unique identifer for collection, can contain alphanumeric or\
          \ dash characters."
        pattern: "^[A-Za-z0-9_\\-.]+$"
      description:
        type: "string"
        example: "transactions from stores worldwide"
        description: "Text describing the collection."
      workspace:
        type: "string"
        example: "commons"
        description: "Name of the workspace that the collection is in."
      status:
        type: "string"
        example: "READY"
        description: "Current status of collection."
        enum:
        - "INITIALIZED"
        - "CREATED"
        - "READY"
        - "PAUSED"
        - "DELETED"
        - "PAUSING"
        - "RESUMING"
        - "PREPARING_BULK"
        - "BULK_INGEST_MODE"
        - "EXITING_BULK_INGEST_MODE"
        - "UNKNOWN"
      sources:
        type: "array"
        description: "List of sources from which collection ingests."
        items:
          $ref: "#/definitions/Source"
      stats:
        description: "Metrics about the collection."
        $ref: "#/definitions/CollectionStats"
      retention_secs:
        type: "integer"
        format: "int64"
        example: 2592000
        description: "Number of seconds after which data is purged based on event\
          \ time."
      field_mappings:
        type: "array"
        description: "List of mappings applied on all documents in a collection."
        items:
          $ref: "#/definitions/FieldMappingV2"
      field_mapping_query:
        description: "Field mapping for a collection."
        $ref: "#/definitions/FieldMappingQuery"
      clustering_key:
        type: "array"
        description: "List of clustering fields for a collection."
        items:
          $ref: "#/definitions/FieldPartition"
      aliases:
        type: "array"
        description: "List of aliases for a collection."
        items:
          $ref: "#/definitions/Alias"
      read_only:
        type: "boolean"
        description: "Whether the collection is read-only or not."
      insert_only:
        type: "boolean"
        description: "Whether the collection is insert only or not."
      bulk_stats:
        type: "array"
        items:
          $ref: "#/definitions/BulkStats"
  CollectionMount:
    type: "object"
    properties:
      type:
        type: "string"
        example: "STATIC"
        description: "Mount type."
        enum:
        - "STATIC"
        - "LIVE"
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      state:
        type: "string"
        example: "ACTIVE"
        description: "Mount type."
        enum:
        - "CREATING"
        - "ACTIVE"
        - "EXPIRED"
        - "DELETING"
      collection_path:
        type: "string"
        example: "commons.foo"
        description: "Collection path."
      virtual_instance_id:
        type: "string"
        example: "5ac23...."
        description: "Virtual instance ID."
      virtual_instance_rrn:
        type: "string"
        example: "rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000"
        description: "Virtual Instance RRN."
      id:
        type: "string"
        example: "5ac23...."
        description: "Mount ID."
      rrn:
        type: "string"
        example: "rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000"
        description: "Mount RRN."
      snapshot_expiration_time_millis:
        type: "integer"
        format: "int64"
        example: 864000000
        description: "Time in millis at which the snapshot expires."
      stats:
        description: "Stats about this Collection Mount"
        $ref: "#/definitions/CollectionMountStats"
  CollectionMountResponse:
    type: "object"
    properties:
      data:
        description: "Resource mount object."
        $ref: "#/definitions/CollectionMount"
  CollectionMountStats:
    type: "object"
    properties:
      last_queried_ms:
        type: "integer"
        format: "int64"
        example: 1535101119334
        description: "Milliseconds since Unix epoch Jan 1, 1970."
  CollectionStats:
    type: "object"
    properties:
      doc_count:
        type: "integer"
        format: "int64"
        example: 2145
        description: "Number of documents in the collection."
      purged_doc_count:
        type: "integer"
        format: "int64"
        example: 2145
        description: "Number of documents purged from the collection."
      fill_progress:
        type: "number"
        format: "double"
        example: 0.6
        description: "Number between 0 and 1 that indicates progress of collection\
          \ creation."
      last_queried_ms:
        type: "integer"
        format: "int64"
        example: 1535101119334
        description: "Milliseconds since Unix epoch Jan 1, 1970."
      last_updated_ms:
        type: "integer"
        format: "int64"
        example: 1535101094433
        description: "Milliseconds since Unix epoch Jan 1, 1970."
      total_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection size in bytes."
      total_index_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection index size in bytes."
      row_index_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection row index size in bytes."
      column_index_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection column index size in bytes."
      inverted_index_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection inverted index size in bytes."
      range_index_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total collection range index size in bytes."
      purged_doc_size:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total size of bytes purged in bytes."
      bytes_inserted:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total number of bytes inserted into the collection."
      bytes_overwritten:
        type: "integer"
        format: "int64"
        example: 123456
        description: "Total number of bytes overwritten in writing into the collection."
      bulk_bytes_inserted:
        type: "integer"
        format: "int64"
        description: "Total number of bytes inserted into the collection during bulk."
      bulk_bytes_overwritten:
        type: "integer"
        format: "int64"
        description: "Total number of bytes overwritten in writing into the collection\
          \ during bulk."
  CreateAliasRequest:
    type: "object"
    required:
    - "collections"
    - "name"
    properties:
      name:
        type: "string"
        example: "aliasName"
        description: "Alias name."
      description:
        type: "string"
        example: "version alias"
        description: "Optional description."
      collections:
        type: "array"
        example: "[\"commons.foo\", \"prod.demo\"]"
        description: "List of fully qualified collection names referenced by alias."
        items:
          type: "string"
  CreateAliasResponse:
    type: "object"
    properties:
      data:
        description: "Alias that was created."
        $ref: "#/definitions/Alias"
  CreateApiKeyRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "my-app"
        description: "Name for this API key."
      role:
        type: "string"
      created_by:
        type: "string"
  CreateApiKeyResponse:
    type: "object"
    properties:
      data:
        description: "The API key that was created."
        $ref: "#/definitions/ApiKey"
  CreateCollectionMountRequest:
    type: "object"
    properties:
      type:
        type: "string"
        example: "STATIC"
        description: "Mount type."
        enum:
        - "STATIC"
        - "LIVE"
      collection_paths:
        type: "array"
        example: "[\"commons.foo\", \"commons.bar\"]"
        description: "Collections to mount."
        items:
          type: "string"
  CreateCollectionMountsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Mounts created."
        items:
          $ref: "#/definitions/CollectionMount"
  CreateCollectionRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "global-transactions"
        description: "Unique identifier for collection, can contain alphanumeric or\
          \ dash characters."
      description:
        type: "string"
        example: "transactions from stores worldwide"
        description: "Text describing the collection."
      sources:
        type: "array"
        description: "List of sources from which to ingest data."
        items:
          $ref: "#/definitions/Source"
      retention_secs:
        type: "integer"
        format: "int64"
        example: 1000000
        description: "Number of seconds after which data is purged, based on event\
          \ time."
        minimum: 1
      event_time_info:
        description: "Deprecated. Configuration for event data. Use an _event_time\
          \ mapping in `field_mapping_query` instead."
        $ref: "#/definitions/EventTimeInfo"
      field_mappings:
        type: "array"
        description: "Deprecated. List of mappings. Use field_mapping_query instead."
        items:
          $ref: "#/definitions/FieldMappingV2"
      field_mapping_query:
        description: "Mapping of fields for a collection."
        $ref: "#/definitions/FieldMappingQuery"
      clustering_key:
        type: "array"
        description: "Deprecated. List of clustering fields. Use CLUSTER BY clause\
          \ in `field_mapping_query` instead."
        items:
          $ref: "#/definitions/FieldPartition"
  CreateCollectionResponse:
    type: "object"
    properties:
      data:
        description: "Collection that was created."
        $ref: "#/definitions/Collection"
  CreateIntegrationRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "event-logs"
        description: "Descriptive label."
      description:
        type: "string"
        example: "AWS account with event data for the data science team."
        description: "Longer explanation for the integration."
      s3:
        description: "Amazon S3 details, must have one of aws_access_key or aws_role."
        $ref: "#/definitions/S3Integration"
      kinesis:
        description: "Amazon Kinesis details, must have one of aws_access_key or aws_role."
        $ref: "#/definitions/KinesisIntegration"
      dynamodb:
        description: "Amazon DynamoDB details, must have one of aws_access_key or\
          \ aws_role."
        $ref: "#/definitions/DynamodbIntegration"
      gcs:
        description: "GCS details."
        $ref: "#/definitions/GcsIntegration"
      azure_blob_storage:
        description: "Azure Blob Storage details."
        $ref: "#/definitions/AzureBlobStorageIntegration"
      azure_service_bus:
        description: "Azure Service Bus details."
        $ref: "#/definitions/AzureServiceBusIntegration"
      azure_event_hubs:
        description: "Azure Event Hubs details."
        $ref: "#/definitions/AzureEventHubsIntegration"
      kafka:
        $ref: "#/definitions/KafkaIntegration"
      mongodb:
        description: "MongoDb details."
        $ref: "#/definitions/MongoDbIntegration"
      snowflake:
        $ref: "#/definitions/SnowflakeIntegration"
  CreateIntegrationResponse:
    type: "object"
    properties:
      data:
        description: "Integration object that was created."
        $ref: "#/definitions/Integration"
  CreateQueryLambdaRequest:
    type: "object"
    required:
    - "name"
    - "sql"
    properties:
      name:
        type: "string"
        example: "myQueryLambda"
        description: "Query Lambda name."
      description:
        type: "string"
        example: "production version foo"
        description: "Optional description."
      sql:
        description: "Query Lambda SQL query."
        $ref: "#/definitions/QueryLambdaSql"
      is_public:
        type: "boolean"
  CreateQueryLambdaTagRequest:
    type: "object"
    required:
    - "tag_name"
    - "version"
    properties:
      tag_name:
        type: "string"
        example: "production"
        description: "Name of Query Lambda tag."
      version:
        type: "string"
        example: "123ABC"
        description: "Hash identifying a Query Lambda tag."
  CreateRoleRequest:
    type: "object"
    properties:
      role_name:
        type: "string"
        example: "read_write"
        description: "Unique identifier for the role."
      description:
        type: "string"
        example: "Role with read and write privileges to all collections."
        description: "Description for the role."
      privileges:
        type: "array"
        description: "List of privileges that will be associated with the role."
        items:
          $ref: "#/definitions/Privilege"
  CreateUserRequest:
    type: "object"
    required:
    - "email"
    - "roles"
    properties:
      email:
        type: "string"
        example: "hello@rockset.com"
        description: "User email, must be unique."
      roles:
        type: "array"
        example: "[\"admin\", \"member\", \"read-only\"]"
        description: "List of roles for a given user."
        items:
          type: "string"
      first_name:
        type: "string"
        example: "John"
        description: "User first name."
      last_name:
        type: "string"
        example: "Doe"
        description: "User last name."
  CreateUserResponse:
    type: "object"
    properties:
      data:
        description: "User that was created."
        $ref: "#/definitions/User"
  CreateViewRequest:
    type: "object"
    required:
    - "name"
    - "query"
    properties:
      name:
        type: "string"
        example: "myAwesomeView"
        description: "View name."
      description:
        type: "string"
        example: "view of awesome collection"
        description: "Optional description."
      query:
        type: "string"
        example: "SELECT * FROM foo"
        description: "SQL for this view."
  CreateViewResponse:
    type: "object"
    properties:
      data:
        description: "View that was updated."
        $ref: "#/definitions/View"
  CreateVirtualInstanceRequest:
    type: "object"
    required:
    - "name"
    properties:
      type:
        type: "string"
        example: "LARGE"
        description: "Requested virtual instance type."
        enum:
        - "FREE"
        - "NANO"
        - "SHARED"
        - "MILLI"
        - "SMALL"
        - "MEDIUM"
        - "LARGE"
        - "XLARGE"
        - "XLARGE2"
        - "XLARGE4"
        - "XLARGE8"
        - "XLARGE16"
      name:
        type: "string"
        example: "prod_vi"
        description: "Unique identifier for virtual instance, can contain alphanumeric\
          \ or dash characters."
      description:
        type: "string"
        example: "VI serving prod traffic"
        description: "Description of requested virtual instance."
      auto_suspend_seconds:
        type: "integer"
        format: "int32"
        example: 3600
        description: "Number of seconds without queries after which the VI is suspended"
  CreateVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance object."
        $ref: "#/definitions/VirtualInstance"
  CreateWorkspaceRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "event_logs"
        description: "Descriptive label and unique identifier."
      description:
        type: "string"
        example: "Datasets of system logs for the ops team."
        description: "Longer explanation for the workspace."
  CreateWorkspaceResponse:
    type: "object"
    properties:
      data:
        description: "The workspace that was created."
        $ref: "#/definitions/Workspace"
  CsvParams:
    type: "object"
    properties:
      firstLineAsColumnNames:
        type: "boolean"
        example: true
        description: "If the first line in every object specifies the column names."
      separator:
        type: "string"
        example: ","
        description: "A single character that is the column separator."
      encoding:
        type: "string"
        example: "UTF-8"
        description: "One of: UTF-8, ISO_8859_1, UTF-16."
      columnNames:
        type: "array"
        example: "[\"c1\", \"c2\", \"c3\"]"
        description: "Names of columns."
        items:
          type: "string"
      columnTypes:
        type: "array"
        example: "[\"BOOLEAN\", \"INTEGER\", \"FLOAT\", \"STRING\"]"
        description: "Names of columns."
        items:
          type: "string"
          enum:
          - "UNKNOWN"
          - "BOOLEAN"
          - "BOOL"
          - "INTEGER"
          - "INT"
          - "FLOAT"
          - "TIME"
          - "DATE"
          - "DATETIME"
          - "TIMESTAMP"
          - "STRING"
      quoteChar:
        type: "string"
        example: "\""
        description: "character within which a cell value is enclosed,null character\
          \ if no such character, default is '\"'"
      escapeChar:
        type: "string"
        example: "\\"
        description: "escape character removes any special meaning from the following\
          \ character,default is '\\'"
  DeleteAliasResponse:
    type: "object"
    properties:
      data:
        description: "Alias that was deleted."
        $ref: "#/definitions/Alias"
  DeleteApiKeyResponse:
    type: "object"
    properties:
      data:
        description: "The API key that was deleted."
        $ref: "#/definitions/ApiKey"
  DeleteCollectionResponse:
    type: "object"
    properties:
      data:
        description: "Collection that was deleted."
        $ref: "#/definitions/Collection"
  DeleteDocumentsRequest:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "array"
        description: "Array of IDs of documents to be deleted."
        items:
          $ref: "#/definitions/DeleteDocumentsRequestData"
  DeleteDocumentsRequestData:
    type: "object"
    required:
    - "_id"
    properties:
      _id:
        type: "string"
        example: "2cd61e3b"
        description: "Unique document ID."
  DeleteDocumentsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Information about deleted documents."
        items:
          $ref: "#/definitions/DocumentStatus"
  DeleteIntegrationResponse:
    type: "object"
    properties:
      data:
        description: "Integration object that was deleted."
        $ref: "#/definitions/Integration"
  DeleteQueryLambdaResponse:
    type: "object"
    properties:
      data:
        description: "Query Lambda details."
        $ref: "#/definitions/QueryLambda"
  DeleteUserResponse:
    type: "object"
    properties:
      data:
        description: "User object that was deleted."
        $ref: "#/definitions/User"
  DeleteViewResponse:
    type: "object"
    properties:
      data:
        description: "View that was deleted."
        $ref: "#/definitions/View"
  DeleteVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance that was deleted."
        $ref: "#/definitions/VirtualInstance"
  DeleteWorkspaceResponse:
    type: "object"
    properties:
      data:
        description: "The workspace that was deleted."
        $ref: "#/definitions/Workspace"
  DocumentStatus:
    type: "object"
    properties:
      _collection:
        type: "string"
        example: "customers"
        description: "Collection name."
      error:
        description: "Error message, if any."
        $ref: "#/definitions/ErrorModel"
      _id:
        type: "string"
        example: "2cd61e3b"
        description: "Unique document ID."
      status:
        type: "string"
        example: "ADDED"
        description: "Status of the document."
        enum:
        - "ADDED"
        - "REPLACED"
        - "DELETED"
        - "PATCHED"
        - "ERROR"
      patch_id:
        type: "string"
        example: "486gsg8"
        description: "Unique id used to represent each patch request."
  DynamodbIntegration:
    type: "object"
    properties:
      aws_access_key:
        description: "Credentials for an AWS access key integration."
        $ref: "#/definitions/AwsAccessKey"
      aws_role:
        description: "Role used for external id type authentication."
        $ref: "#/definitions/AwsRole"
      s3_export_bucket_name:
        type: "string"
        description: "S3 bucket used for export during collection initial dump."
  ErrorModel:
    type: "object"
    properties:
      message:
        type: "string"
        example: "collection not found"
        description: "Descriptive message about the error."
      type:
        type: "string"
        example: "INVALIDINPUT"
        description: "Category of the error."
        enum:
        - "AUTHEXCEPTION"
        - "VERSIONEXCEPTION"
        - "INTERNALERROR"
        - "INVALIDINPUT"
        - "NOTIMPLEMENTEDYET"
        - "RESOURCEEXCEEDED"
        - "ALREADYEXISTS"
        - "NOTALLOWED"
        - "NOTACCEPTABLE"
        - "NOTSUPPORTED"
        - "NOTFOUND"
        - "DEPENDENTRESOURCES"
        - "QUERY_ERROR"
        - "NOT_READY"
        - "FORBIDDEN"
        - "QUERY_TIMEOUT"
        - "CONNECTION_ERROR"
        - "CONTENTTOOLARGE"
        - "CREATING"
        - "BADREQUEST"
        - "SERVICEUNAVAILABLE"
        - "CONFLICT"
        - "RATELIMITEXCEEDED"
        - "QUERY_CANCELLED"
        - "CLIENT_CONNECTION_ERROR"
      line:
        type: "integer"
        format: "int32"
        description: "Line where the error happened (if applicable)."
      column:
        type: "integer"
        format: "int32"
        description: "Column where the error happened (if applicable)."
      trace_id:
        type: "string"
        description: "Internal trace ID to help with debugging."
      error_id:
        type: "string"
        description: "ID of the error."
      query_id:
        type: "string"
        description: "ID of the query (if applicable)."
    description: "Describes details about an error"
  EventTimeInfo:
    type: "object"
    required:
    - "field"
    properties:
      field:
        type: "string"
        example: "timestamp"
        description: "Name of the field containing event time."
      format:
        type: "string"
        example: "seconds_since_epoch"
        description: "Format of time field, can be one of: milliseconds_since_epoch,\
          \ seconds_since_epoch."
      time_zone:
        type: "string"
        example: "UTC"
        description: "Default time zone, in standard IANA format."
  ExecutePublicQueryLambdaRequest:
    type: "object"
    properties:
      parameters:
        type: "array"
        description: "List of named parameters."
        items:
          $ref: "#/definitions/QueryParameter"
      default_row_limit:
        type: "integer"
        format: "int32"
        description: "Row limit to use if no limit specified in the SQL query text."
      generate_warnings:
        type: "boolean"
        description: "Whether to generate warnings."
  ExecuteQueryLambdaRequest:
    type: "object"
    properties:
      parameters:
        type: "array"
        description: "List of named parameters."
        items:
          $ref: "#/definitions/QueryParameter"
      default_row_limit:
        type: "integer"
        format: "int32"
        description: "Row limit to use if no limit specified in the SQL query text."
      generate_warnings:
        type: "boolean"
        description: "Whether to generate warnings."
      paginate:
        type: "boolean"
        description: "Flag to paginate and store the results of this query for later\
          \ / sequential retrieval."
      initial_paginate_response_doc_count:
        type: "integer"
        format: "int32"
        description: "Number of documents to return in addition to paginating for\
          \ this query call. Only relevant if `paginate` flag is also set."
      async_options:
        description: "Options for configuring Asynchronous Query Mode (beta)."
        $ref: "#/definitions/AsyncQueryOptions"
      virtual_instance_id:
        type: "string"
        description: "Virtual instance on which to run the query."
  FieldMapping:
    type: "object"
    properties: {}
  FieldMappingQuery:
    type: "object"
    properties:
      sql:
        type: "string"
        example: "sql"
        description: "SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input."
  FieldMappingV2:
    type: "object"
    properties:
      name:
        type: "string"
        example: "myTestMapping"
        description: "A user specified string that is a name for this mapping."
      is_drop_all_fields:
        type: "boolean"
        example: true
        description: "A boolean that determines whether to drop all fields in this\
          \ document. If set, input and output fields should not be set"
      input_fields:
        type: "array"
        description: "A List of InputField for this mapping."
        items:
          $ref: "#/definitions/InputField"
      output_field:
        description: "An OutputField for this mapping."
        $ref: "#/definitions/OutputField"
  FieldPartition:
    type: "object"
    properties:
      field_name:
        type: "string"
        example: "address.city.zipcode"
        description: "The name of a field, parsed as a SQL qualified name."
      type:
        type: "string"
        example: "AUTO"
        description: "The type of partitions on a field."
        enum:
        - "AUTO"
      keys:
        type: "array"
        example: "[\"value1\", \"value2\"]"
        description: "The values for partitioning of a field. Unneeded if the partition\
          \ type is AUTO."
        items:
          type: "string"
  FormatParams:
    type: "object"
    properties:
      json:
        type: "boolean"
        example: true
        description: "Source data is in json format."
      csv:
        $ref: "#/definitions/CsvParams"
      xml:
        $ref: "#/definitions/XmlParams"
      mysql_dms:
        type: "boolean"
      postgres_dms:
        type: "boolean"
      mssql_dms:
        type: "boolean"
      oracle_dms:
        type: "boolean"
      avro:
        $ref: "#/definitions/AvroParams"
  GcpServiceAccount:
    type: "object"
    required:
    - "service_account_key_file_json"
    properties:
      service_account_key_file_json:
        type: "string"
        description: "Contents of JSON Service Account key file."
  GcsIntegration:
    type: "object"
    properties:
      gcp_service_account:
        description: "Credentials for an GCP key integration."
        $ref: "#/definitions/GcpServiceAccount"
  GetAliasResponse:
    type: "object"
    properties:
      data:
        description: "Alias that was requested."
        $ref: "#/definitions/Alias"
  GetApiKeyResponse:
    type: "object"
    properties:
      data:
        description: "The requested API key object."
        $ref: "#/definitions/ApiKey"
  GetCollectionResponse:
    type: "object"
    properties:
      data:
        description: "Collection that was requested."
        $ref: "#/definitions/Collection"
  GetIntegrationResponse:
    type: "object"
    properties:
      data:
        description: "Integration object."
        $ref: "#/definitions/Integration"
  GetQueryResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/QueryInfo"
  GetViewResponse:
    type: "object"
    properties:
      data:
        description: "View that was requested."
        $ref: "#/definitions/View"
  GetVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance that was requested."
        $ref: "#/definitions/VirtualInstance"
  GetWorkspaceResponse:
    type: "object"
    properties:
      data:
        description: "The workspace that was requested."
        $ref: "#/definitions/Workspace"
  InputField:
    type: "object"
    properties:
      field_name:
        type: "string"
        example: "address.city.zipcode"
        description: "The name of a field, parsed as a SQL qualified name."
      if_missing:
        type: "string"
        example: "SKIP"
        description: "Define the behaviour if fieldName is missing or is null."
        enum:
        - "SKIP"
        - "PASS"
      is_drop:
        type: "boolean"
        example: true
        description: "If true, then drop fieldName from the document."
      param:
        type: "string"
        example: "zip"
        description: "Sql parameter name."
  Integration:
    type: "object"
    required:
    - "created_by"
    - "name"
    properties:
      name:
        type: "string"
        example: "event-logs"
        description: "Descriptive label and unique identifier."
      description:
        type: "string"
        example: "AWS account with event data for the data science team."
        description: "Longer explanation for the integration."
      created_by:
        type: "string"
        example: "hello@rockset.com"
        description: "Email of user who created the integration."
      owner_email:
        type: "string"
        example: "abc@rockset.com"
        description: "User that owns this integration."
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      s3:
        description: "Amazon S3 details, must have one of aws_access_key or aws_role."
        $ref: "#/definitions/S3Integration"
      kinesis:
        description: "Amazon Kinesis details, must have one of aws_access_key or aws_role."
        $ref: "#/definitions/KinesisIntegration"
      dynamodb:
        description: "Amazon DynamoDB details, must have one of aws_access_key or\
          \ aws_role."
        $ref: "#/definitions/DynamodbIntegration"
      gcs:
        description: "GCS details."
        $ref: "#/definitions/GcsIntegration"
      azure_blob_storage:
        description: "Azure Blob Storage details."
        $ref: "#/definitions/AzureBlobStorageIntegration"
      azure_service_bus:
        description: "Azure Service Bus details."
        $ref: "#/definitions/AzureServiceBusIntegration"
      azure_event_hubs:
        description: "Azure Event Hubs details."
        $ref: "#/definitions/AzureEventHubsIntegration"
      kafka:
        description: "Kafka details."
        $ref: "#/definitions/KafkaIntegration"
      mongodb:
        description: "MongoDb details."
        $ref: "#/definitions/MongoDbIntegration"
      snowflake:
        description: "Snowflake details."
        $ref: "#/definitions/SnowflakeIntegration"
      collections:
        type: "array"
        description: "List of collections that use the integration."
        items:
          $ref: "#/definitions/Collection"
    description: "Integrations that can be associated with data sources to create\
      \ collections. Only one type of integration may be specified."
  KafkaIntegration:
    type: "object"
    properties:
      kafka_topic_names:
        type: "array"
        description: "Kafka topics to tail."
        uniqueItems: true
        items:
          type: "string"
      source_status_by_topic:
        type: "object"
        example: "{\"topic-a\": \"DORMANT\"}"
        description: "The status of the Kafka source by topic."
        readOnly: true
        additionalProperties:
          $ref: "#/definitions/StatusKafka"
      kafka_data_format:
        type: "string"
        example: "JSON"
        description: "The format of the Kafka topics being tailed."
        enum:
        - "JSON"
        - "AVRO"
      connection_string:
        type: "string"
        description: "Kafka connection string."
      aws_role:
        description: "Details of an AWS cross-account role integration."
        $ref: "#/definitions/AwsRole"
      use_v3:
        type: "boolean"
      bootstrap_servers:
        type: "string"
        example: "localhost:9092"
        description: "The Kafka bootstrap server url(s). Required only for V3 integration."
      security_config:
        description: "Kafka security configurations."
        $ref: "#/definitions/KafkaV3SecurityConfig"
      schema_registry_config:
        description: "Kafka configurations for schema registry."
        $ref: "#/definitions/SchemaRegistryConfig"
  KafkaV3SecurityConfig:
    type: "object"
    properties:
      api_key:
        type: "string"
      secret:
        type: "string"
  KinesisIntegration:
    type: "object"
    properties:
      aws_access_key:
        description: "Credentials for an AWS access key integration."
        $ref: "#/definitions/AwsAccessKey"
      aws_role:
        description: "Details of an AWS cross-account role integration."
        $ref: "#/definitions/AwsRole"
  ListAliasesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all aliases."
        items:
          $ref: "#/definitions/Alias"
  ListApiKeysResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of API key objects."
        items:
          $ref: "#/definitions/ApiKey"
  ListCollectionMountsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all collection mounts."
        items:
          $ref: "#/definitions/CollectionMount"
  ListCollectionsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all collections."
        items:
          $ref: "#/definitions/Collection"
  ListIntegrationsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of integration objects."
        items:
          $ref: "#/definitions/Integration"
  ListQueriesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/QueryInfo"
  ListQueryLambdaTagsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all tags associated with a Query Lambda."
        items:
          $ref: "#/definitions/QueryLambdaTag"
  ListQueryLambdaVersionsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all versions for a particular Query Lambda."
        items:
          $ref: "#/definitions/QueryLambdaVersion"
  ListQueryLambdasResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all Query Lambdas."
        items:
          $ref: "#/definitions/QueryLambda"
  ListRolesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all roles."
        items:
          $ref: "#/definitions/Role"
  ListUnsubscribePreferencesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of notification preferences."
        items:
          $ref: "#/definitions/UnsubscribePreference"
  ListUsersResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of users."
        items:
          $ref: "#/definitions/User"
  ListViewsResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all views."
        items:
          $ref: "#/definitions/View"
  ListVirtualInstancesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of all virtual instances."
        items:
          $ref: "#/definitions/VirtualInstance"
  ListWorkspacesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of workspaces."
        items:
          $ref: "#/definitions/Workspace"
  MongoDbIntegration:
    type: "object"
    required:
    - "connection_uri"
    properties:
      connection_uri:
        type: "string"
        example: "mongodb+srv://<username>:<password>@server.example.com/"
        description: "MongoDB connection URI string."
  Organization:
    type: "object"
    properties:
      id:
        type: "string"
        example: "rockset"
        description: "Unique identifier for the organization."
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      display_name:
        type: "string"
        example: "Rockset, Inc"
        description: "Name of the organization."
      external_id:
        type: "string"
        example: "<hash>"
        description: "Organization's unique external ID within Rockset."
      rockset_user:
        type: "string"
        example: "<id>"
        description: "Rockset's global AWS user."
      clusters:
        type: "array"
        example: "[{ ... }]"
        description: "List of clusters associated with this org."
        items:
          $ref: "#/definitions/Cluster"
    description: "An organization in Rockset is a container for users and collections."
  OrganizationResponse:
    type: "object"
    properties:
      data:
        description: "Organization object."
        $ref: "#/definitions/Organization"
  OutputField:
    type: "object"
    properties:
      field_name:
        type: "string"
        example: "zip_hash"
        description: "The name of a field, parsed as a SQL qualified name."
      value:
        example: "SHA256(:zip)"
        description: "The name of a sql function."
        $ref: "#/definitions/SqlExpression"
      on_error:
        type: "string"
        example: "SKIP"
        description: "Error in Mapping execution: 'skip' or 'fail'."
        enum:
        - "SKIP"
        - "FAIL"
  Pagination:
    type: "object"
    properties:
      start_cursor:
        type: "string"
        example: "vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg"
        description: "Use this cursor to fetch the first page of results for this\
          \ query."
  PaginationInfo:
    type: "object"
    properties:
      current_page_doc_count:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of documents returned in this result set."
      next_cursor_offset:
        type: "integer"
        format: "int64"
        example: 2000
        description: "The doc offset that next_cursor starts at."
      start_cursor:
        type: "string"
        example: "startcursor"
        description: "Cursor used to retrieve the first set of documents."
      next_cursor:
        type: "string"
        example: "testnextcursor"
        description: "Cursor to use to get the list of documents."
      next_page_link:
        type: "string"
        example: "https://api.rs2.usw2.rockset.com/...."
        description: "Direct link to the next page of results."
        readOnly: true
  PatchDocument:
    type: "object"
    required:
    - "_id"
    - "patch"
    properties:
      _id:
        type: "string"
        example: "ca2d6832-1bfd-f88f-0620-d2aa27a5d86c"
        description: "Unique ID of the document to be patched."
      patch:
        type: "array"
        description: "List of patch operations."
        items:
          $ref: "#/definitions/PatchOperation"
  PatchDocumentsRequest:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "array"
        description: "List of patches to be applied."
        items:
          $ref: "#/definitions/PatchDocument"
  PatchDocumentsResponse:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/DocumentStatus"
  PatchOperation:
    type: "object"
    required:
    - "op"
    - "path"
    properties:
      op:
        type: "string"
        example: "ADD"
        description: "[JSON Patch operation](https://datatracker.ietf.org/doc/html/rfc6902#page-4)\
          \ to be performed in this patch. Case insensitive."
        enum:
        - "ADD"
        - "REPLACE"
        - "REMOVE"
        - "COPY"
        - "MOVE"
        - "TEST"
        - "INCREMENT"
      path:
        type: "string"
        example: "/foo/bar"
        description: "[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)\
          \ referencing a location in the target document where the operation is performed"
      value:
        type: "object"
        example: "baz"
        description: "Value used in the patch operation. Required for `ADD`, `REPLACE`,\
          \ `TEST`, and `INCREMENT` operations."
      from:
        type: "string"
        description: "[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)\
          \ referencing a location in the target document. Required for `COPY` and\
          \ `MOVE` operations."
  Privilege:
    type: "object"
    properties:
      action:
        type: "string"
        example: "CREATE_COLLECTION_WS"
        description: "The action allowed by this privilege."
        enum:
        - "ALL_GLOBAL_ACTIONS"
        - "GET_ORG_GLOBAL"
        - "GET_CURRENT_USER_GLOBAL"
        - "INVITE_USER_GLOBAL"
        - "DELETE_USER_GLOBAL"
        - "LIST_USERS_GLOBAL"
        - "GET_BILLING_GLOBAL"
        - "UPDATE_BILLING_GLOBAL"
        - "UPDATE_SETTINGS_GLOBAL"
        - "GET_METRICS_GLOBAL"
        - "CREATE_VI_GLOBAL"
        - "UPDATE_VI_GLOBAL"
        - "LIST_VI_GLOBAL"
        - "CREATE_WS_GLOBAL"
        - "LIST_WS_GLOBAL"
        - "CREATE_INTEGRATION_GLOBAL"
        - "DELETE_INTEGRATION_GLOBAL"
        - "LIST_INTEGRATIONS_GLOBAL"
        - "UPDATE_RESOURCE_OWNER_GLOBAL"
        - "CREATE_API_KEY_GLOBAL"
        - "CREATE_ROLE_GLOBAL"
        - "UPDATE_ROLE_GLOBAL"
        - "DELETE_ROLE_GLOBAL"
        - "LIST_ROLES_GLOBAL"
        - "GRANT_REVOKE_ROLE_GLOBAL"
        - "ALL_INTEGRATION_ACTIONS"
        - "CREATE_COLLECTION_INTEGRATION"
        - "ALL_WORKSPACE_ACTIONS"
        - "DELETE_WS"
        - "QUERY_DATA_WS"
        - "WRITE_DATA_WS"
        - "CREATE_COLLECTION_WS"
        - "DELETE_COLLECTION_WS"
        - "CREATE_ALIAS_WS"
        - "DELETE_ALIAS_WS"
        - "LIST_RESOURCES_WS"
        - "CREATE_QUERY_LAMBDA_WS"
        - "DELETE_QUERY_LAMBDA_WS"
        - "EXECUTE_QUERY_LAMBDA_WS"
        - "CREATE_VIEW_WS"
        - "DELETE_VIEW_WS"
        - "ALL_VI_ACTIONS"
        - "QUERY_VI"
        - "UPDATE_VI"
        - "SUSPEND_RESUME_VI"
        - "DELETE_VI"
      resource_name:
        type: "string"
        example: "commons"
        description: "The resources on which the action is allowed. Defaults to '*All*'\
          \ if not specified."
      cluster:
        type: "string"
        example: "*ALL*"
        description: "Cluster ID (`usw2a1` for us-west-2, `use1a1` for us-east-1,\
          \ `euc1a1` for eu-central-1) for which the action is allowed. Defaults to\
          \ '*All*' if not specified."
  QueryError:
    type: "object"
    properties:
      type:
        type: "string"
        example: "ResourceExceeded"
        description: "The type of error."
      message:
        type: "string"
        example: "Too many rows"
        description: "A message associated with the error, containing more information\
          \ about it."
      status_code:
        type: "integer"
        format: "int32"
        example: 429
        description: "The HTTP status code associated with this error, had it been\
          \ sent as the response status code"
  QueryFieldType:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        example: "_id"
        description: "Name of the field."
      type:
        type: "string"
        example: "string"
        description: "Data type of the field."
  QueryInfo:
    type: "object"
    properties:
      query_id:
        type: "string"
        example: "5b596206-c632-4a08-8343-0c560f7ef7f1"
        description: "Unique Query ID."
      status:
        type: "string"
        example: "RUNNING"
        description: "Status of the query."
        enum:
        - "QUEUED"
        - "RUNNING"
        - "COMPLETED"
        - "ERROR"
        - "CANCELLED"
      executed_by:
        type: "string"
        example: "xyz@rockset.com"
        description: "User ID who executed the query."
      submitted_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Time (UTC) the query request was first received and queued for\
          \ execution."
      expires_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Time (UTC) that query results expire. Only populated if `status`\
          \ is `COMPLETE`."
      stats:
        description: "Various stats about the query's execution."
        $ref: "#/definitions/Stats"
      pagination:
        description: "Information for fetching query results pages. Only populated\
          \ if `status` is `COMPLETE`."
        $ref: "#/definitions/Pagination"
      last_offset:
        type: "string"
        description: "The log offset that query results were written to in the destination\
          \ collection. Only populated for INSERT INTO queries."
      query_errors:
        type: "array"
        description: "Errors encountered while executing the query."
        items:
          $ref: "#/definitions/QueryError"
  QueryLambda:
    type: "object"
    properties:
      workspace:
        type: "string"
        example: "commons"
        description: "Workspace of this Query Lambda."
      last_updated_by:
        type: "string"
        example: "..@rockset.com"
        description: "User that created this Query Lambda."
      last_updated:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when Query Lambda was last updated."
      name:
        type: "string"
        example: "myQuery"
        description: "Query Lambda name."
      version_count:
        type: "integer"
        format: "int32"
        example: 1
        description: "Number of Query Lambda versions."
      collections:
        type: "array"
        description: "Collections/aliases queried by underlying SQL query."
        items:
          type: "string"
      latest_version:
        description: "Query Lambda version details for most recently created version."
        $ref: "#/definitions/QueryLambdaVersion"
  QueryLambdaSql:
    type: "object"
    required:
    - "query"
    properties:
      query:
        type: "string"
        example: "SELECT 'Foo'"
        description: "SQL text."
      default_parameters:
        type: "array"
        description: "Default parameters for this Query Lambda."
        items:
          $ref: "#/definitions/QueryParameter"
  QueryLambdaStats:
    type: "object"
    properties:
      last_executed:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      last_executed_by:
        type: "string"
        example: "...@rockset.com"
        description: "User who last executed Query Lambda."
      last_execution_error:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of last execution failure."
      last_execution_error_message:
        type: "string"
        example: "[error message]"
        description: "Error message associated with last failed execution."
  QueryLambdaTag:
    type: "object"
    properties:
      tag_name:
        type: "string"
        example: "production"
        description: "Name of Query Lambda tag."
      version:
        example: "b1d7c9a34b50cd"
        description: "Query lambda version."
        $ref: "#/definitions/QueryLambdaVersion"
  QueryLambdaTagResponse:
    type: "object"
    properties:
      data:
        description: "Updated Query Lambda tag."
        $ref: "#/definitions/QueryLambdaTag"
  QueryLambdaVersion:
    type: "object"
    properties:
      workspace:
        type: "string"
        example: "commons"
        description: "Workspace of this Query Lambda."
      created_by:
        type: "string"
        example: "..@rockset.com"
        description: "User that created this Query Lambda."
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when Query Lambda was created."
      name:
        type: "string"
        example: "myQuery"
        description: "Query Lambda name."
      version:
        type: "string"
        example: "acb99feg92bcaf"
        description: "Query Lambda version."
      description:
        type: "string"
        example: "production version foo"
        description: "Optional description."
      sql:
        description: "Query Lambda SQL query."
        $ref: "#/definitions/QueryLambdaSql"
      collections:
        type: "array"
        description: "Collections queried by underlying SQL query."
        items:
          type: "string"
      state:
        type: "string"
        example: "ACTIVE"
        description: "Status of this Query Lambda."
        enum:
        - "ACTIVE"
        - "INVALID_SQL"
      stats:
        description: "Stats related to this Query Lambda."
        $ref: "#/definitions/QueryLambdaStats"
      public_access_id:
        type: "string"
        description: "Public access ID associated with this QL version"
  QueryLambdaVersionResponse:
    type: "object"
    properties:
      data:
        description: "Query Lambda version details."
        $ref: "#/definitions/QueryLambdaVersion"
  QueryPaginationResponse:
    type: "object"
    properties:
      results:
        type: "array"
        description: "List of documents returned by the query."
        items:
          type: "object"
      results_total_doc_count:
        type: "integer"
        format: "int64"
        description: "Total documents returned by the query."
      pagination:
        description: "Pagination metadata."
        $ref: "#/definitions/PaginationInfo"
  QueryParameter:
    type: "object"
    required:
    - "name"
    - "type"
    - "value"
    properties:
      name:
        type: "string"
        example: "_id"
        description: "Name of the field."
      type:
        type: "string"
        example: "string"
        description: "Data type of the field."
      value:
        type: "string"
        example: "85beb391"
        description: "Literal value of the field."
  QueryRequest:
    type: "object"
    required:
    - "sql"
    properties:
      sql:
        description: "Main query request body."
        $ref: "#/definitions/QueryRequestSql"
      async_options:
        description: "Options for configuring Asynchronous Query Mode (beta)."
        $ref: "#/definitions/AsyncQueryOptions"
  QueryRequestSql:
    type: "object"
    required:
    - "query"
    properties:
      query:
        type: "string"
        example: "SELECT * FROM foo where _id = :_id"
        description: "SQL query string."
      generate_warnings:
        type: "boolean"
        example: false
        description: "Flag to enable warnings. Warnings can help debug query issues\
          \ but negatively affect performance."
      parameters:
        type: "array"
        description: "List of named parameters."
        items:
          $ref: "#/definitions/QueryParameter"
      default_row_limit:
        type: "integer"
        format: "int32"
        description: "Row limit to use. Limits specified in the query text will override\
          \ this default."
      paginate:
        type: "boolean"
        description: "Flag to paginate and store the results of this query for later\
          \ / sequential retrieval."
      initial_paginate_response_doc_count:
        type: "integer"
        format: "int32"
        description: "Number of documents to return in addition to paginating for\
          \ this query call. Only relevant if `paginate` flag is also set."
  QueryResponse:
    type: "object"
    properties:
      query_id:
        type: "string"
        description: "Unique ID for this query."
      collections:
        type: "array"
        description: "List of collections referenced in the query."
        items:
          type: "string"
      results:
        type: "array"
        description: "Results from the query."
        items:
          type: "object"
      stats:
        description: "Meta information about the query including execution latencies."
        $ref: "#/definitions/QueryResponseStats"
      warnings:
        type: "array"
        description: "Warnings generated by the query. Only populated if `generate_warnings`\
          \ is specified in the query request."
        items:
          type: "string"
      query_lambda_path:
        type: "string"
        description: "The full path of the executed query lambda. Includes version\
          \ information."
      query_errors:
        type: "array"
        description: "Errors encountered while executing the query."
        items:
          $ref: "#/definitions/QueryError"
      column_fields:
        type: "array"
        description: "Meta information about each column in the result set. Not populated\
          \ in `SELECT *` queries."
        items:
          $ref: "#/definitions/QueryFieldType"
      results_total_doc_count:
        type: "integer"
        format: "int64"
        description: "Number of results generated by the query."
      pagination:
        description: "Pagination information. Only populated if `paginate` is specified\
          \ in the query request."
        $ref: "#/definitions/PaginationInfo"
      last_offset:
        type: "string"
        description: "If this was a write query, this is the log offset the query\
          \ was written to."
  QueryResponseStats:
    type: "object"
    properties:
      elapsed_time_ms:
        type: "integer"
        format: "int64"
        example: 126
        description: "Query time in milliseconds."
      throttled_time_micros:
        type: "integer"
        format: "int64"
        example: 126
        description: "Time query was throttled by admission control."
  ResumeVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance that was resumed."
        $ref: "#/definitions/VirtualInstance"
  Role:
    type: "object"
    properties:
      role_name:
        type: "string"
        example: "read_write"
        description: "Unique identifier for the role."
      description:
        type: "string"
        example: "Role with read and write privileges to all collections."
        description: "Description for the role."
      owner_email:
        type: "string"
        example: "hello@rockset.com"
        description: "Email of the user who currently owns the role."
      created_by:
        type: "string"
        example: "hello@rockset.com"
        description: "Email of the user who created the role."
      privileges:
        type: "array"
        description: "List of privileges associated with the role."
        items:
          $ref: "#/definitions/Privilege"
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when the role was created."
  RoleResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Role"
  S3Integration:
    type: "object"
    properties:
      aws_access_key:
        description: "Credentials for an AWS access key integration."
        $ref: "#/definitions/AwsAccessKey"
      aws_role:
        description: "Details of an AWS cross-account role integration."
        $ref: "#/definitions/AwsRole"
  SchemaRegistryConfig:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Schema registry URL."
      key:
        type: "string"
        description: "The secure API key for schema registry."
      secret:
        type: "string"
        description: "The secure API password registry."
  SnowflakeIntegration:
    type: "object"
    required:
    - "default_warehouse"
    - "password"
    - "s3_export_path"
    - "snowflake_url"
    - "username"
    properties:
      snowflake_url:
        type: "string"
        example: "acme-marketing-test-account.snowflakecomputing.com"
        description: "Snowflake browser url."
      username:
        type: "string"
        description: "Snowflake database username."
      password:
        type: "string"
        description: "Snowflake database password."
      user_role:
        type: "string"
        description: "Snowflake user role. If unspecified, will use the default user\
          \ role."
      aws_role:
        description: "Details of an AWS cross-account role integration."
        $ref: "#/definitions/AwsRole"
      aws_access_key:
        description: "Credentials for an AWS access key integration."
        $ref: "#/definitions/AwsAccessKey"
      default_warehouse:
        type: "string"
        description: "default snowflake data warehouse name for query execution. Warehouse\
          \ name can be overridden in the collection."
      s3_export_path:
        type: "string"
        example: "s3://bucket/prefix"
        description: "S3 path used for running 'COPY INTO' command on snowflake table."
  Source:
    type: "object"
    properties:
      id:
        type: "string"
        example: "a1df483c-734e-485b-8005-f46386ef42f6"
        description: "Unique source identifier."
      integration_name:
        type: "string"
        example: "aws-integration"
        description: "Name of integration to use."
      s3:
        description: "Configuration for ingestion from S3."
        $ref: "#/definitions/SourceS3"
      kinesis:
        description: "Configuration for ingestion from kinesis stream."
        $ref: "#/definitions/SourceKinesis"
      gcs:
        description: "Configuration for ingestion from GCS."
        $ref: "#/definitions/SourceGcs"
      azure_blob_storage:
        description: "Configuration for ingestion from Azure Blob Storage."
        $ref: "#/definitions/SourceAzureBlobStorage"
      azure_service_bus:
        description: "Configuration for ingestion from Azure Service Bus."
        $ref: "#/definitions/SourceAzureServiceBus"
      azure_event_hubs:
        description: "Configuration for ingestion from Azure Event Hubs."
        $ref: "#/definitions/SourceAzureEventHubs"
      dynamodb:
        description: "Configuration for ingestion from  a dynamodb table."
        $ref: "#/definitions/SourceDynamoDb"
      file_upload:
        description: "File upload details."
        $ref: "#/definitions/SourceFileUpload"
      kafka:
        description: "Kafka collection identifier."
        $ref: "#/definitions/SourceKafka"
      mongodb:
        description: "MongoDB collection details."
        $ref: "#/definitions/SourceMongoDb"
      snowflake:
        description: "Configuration for ingestion from Snowflake."
        $ref: "#/definitions/SourceSnowflake"
      status:
        description: "The ingest status of this source."
        readOnly: true
        $ref: "#/definitions/Status"
      format_params:
        description: "Format parameters for data from this source."
        $ref: "#/definitions/FormatParams"
    description: "Details about the data source for the given collection. Only one\
      \ of the following fields are allowed to be defined. Only collections can act\
      \ as data sources for views. "
  SourceAzureBlobStorage:
    type: "object"
    properties:
      container:
        type: "string"
        example: "server-logs"
        description: "Name of Azure blob Storage container you want to ingest from."
      prefix:
        type: "string"
        example: "prefix/to/blobs"
        description: "Prefix that selects blobs to ingest."
      pattern:
        type: "string"
        example: "prefix/to/**/keys/*.format"
        description: "Glob-style pattern that selects keys to ingest. Only either\
          \ prefix or pattern can be specified."
      blob_count_downloaded:
        type: "integer"
        format: "int64"
        readOnly: true
      blob_count_total:
        type: "integer"
        format: "int64"
        readOnly: true
      blob_bytes_total:
        type: "integer"
        format: "int64"
        readOnly: true
  SourceAzureEventHubs:
    type: "object"
    properties:
      hub_id:
        type: "string"
        example: "event-hub-1"
        description: "Name of the hub which rockset should ingest from."
      offset_reset_policy:
        type: "string"
        example: "EARLIEST"
        description: "The offset reset policy."
        enum:
        - "LATEST"
        - "EARLIEST"
      status:
        description: "Source status."
        readOnly: true
        $ref: "#/definitions/StatusAzureEventHubs"
  SourceAzureServiceBus:
    type: "object"
    properties:
      topic:
        type: "string"
        example: "rockset-topic"
        description: "Name of the topic which rockset should ingest from."
      subscription:
        type: "string"
        example: "rockset-subscription"
        description: "The subscription to read from the topic."
      status:
        description: "Azure Service bus source status."
        readOnly: true
        $ref: "#/definitions/StatusAzureServiceBus"
  SourceDynamoDb:
    type: "object"
    required:
    - "table_name"
    properties:
      aws_region:
        type: "string"
        example: "us-east-2"
        description: "AWS region name of DynamoDB table, by default us-west-2 is used."
      table_name:
        type: "string"
        example: "dynamodb_table_name"
        description: "Name of DynamoDB table containing data."
      current_status:
        description: "DynamoDB source status v2."
        readOnly: true
        $ref: "#/definitions/StatusDynamoDbV2"
      rcu:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Max RCU usage for scan."
      status:
        description: "DynamoDB source status."
        readOnly: true
        $ref: "#/definitions/StatusDynamoDb"
      use_scan_api:
        type: "boolean"
        description: "Whether to use DynamoDB Scan API for the initial scan."
  SourceFileUpload:
    type: "object"
    required:
    - "file_name"
    - "file_size"
    - "file_upload_time"
    properties:
      file_name:
        type: "string"
        example: "file1.json"
        description: "Name of the file."
      file_size:
        type: "integer"
        format: "int64"
        example: 12345
        description: "Size of the file in bytes."
      file_upload_time:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "Time of file upload."
  SourceGcs:
    type: "object"
    properties:
      bucket:
        type: "string"
        example: "server-logs"
        description: "Name of GCS bucket you want to ingest from."
      prefix:
        type: "string"
        example: "prefix/to/keys"
        description: "Prefix that selects keys to ingest."
      pattern:
        type: "string"
        example: "prefix/to/**/keys/*.format"
        description: "Glob-style pattern that selects keys to ingest. Only either\
          \ prefix or pattern can be specified."
      object_count_downloaded:
        type: "integer"
        format: "int64"
        readOnly: true
      object_count_total:
        type: "integer"
        format: "int64"
        readOnly: true
      object_bytes_total:
        type: "integer"
        format: "int64"
        readOnly: true
      object_bytes_downloaded:
        type: "integer"
        format: "int64"
        readOnly: true
  SourceKafka:
    type: "object"
    properties:
      kafka_topic_name:
        type: "string"
        example: "example-topic"
        description: "The Kafka topic to be tailed."
      status:
        description: "Kafka source status."
        readOnly: true
        $ref: "#/definitions/StatusKafka"
      consumer_group_id:
        type: "string"
        example: "org-collection"
        description: "The Kafka consumer group Id being used."
      use_v3:
        type: "boolean"
        description: "Whether to use v3 integration."
      offset_reset_policy:
        type: "string"
        example: "EARLIEST"
        description: "The offset reset policy."
        enum:
        - "LATEST"
        - "EARLIEST"
  SourceKinesis:
    type: "object"
    required:
    - "stream_name"
    properties:
      aws_region:
        type: "string"
        example: "us-east-2"
        description: "AWS region name of Kinesis stream, by default us-west-2 is used."
      stream_name:
        type: "string"
        example: "click_stream"
        description: "Name of kinesis stream."
      dms_primary_key:
        type: "array"
        description: "Set of fields that correspond to a DMS primary key."
        items:
          type: "string"
      offset_reset_policy:
        type: "string"
        example: "EARLIEST"
        description: "For non-DMS streams, Rockset can tail from the earliest end\
          \ or latest end of kinesis source."
        enum:
        - "LATEST"
        - "EARLIEST"
  SourceMongoDb:
    type: "object"
    required:
    - "collection_name"
    - "database_name"
    properties:
      database_name:
        type: "string"
        example: "my_database"
        description: "MongoDB database name containing this collection."
      collection_name:
        type: "string"
        example: "my_collection"
        description: "MongoDB collection name."
      status:
        description: "MongoDB source status."
        readOnly: true
        $ref: "#/definitions/StatusMongoDb"
  SourceS3:
    type: "object"
    required:
    - "bucket"
    - "prefixes"
    properties:
      prefix:
        type: "string"
        example: "prefix/to/keys"
        description: "Prefix that selects keys to ingest."
      pattern:
        type: "string"
        example: "prefix/to/**/keys/*.format"
        description: "Glob-style pattern that selects keys to ingest. Only either\
          \ prefix or pattern can be specified."
      region:
        type: "string"
        example: "us-west-2"
        description: "AWS region containing source bucket."
      bucket:
        type: "string"
        example: "s3://customer-account-info"
        description: "Address of S3 bucket containing data."
      prefixes:
        type: "array"
        example: "[\"/transactions\", \"/stores\"]"
        description: "List of prefixes to paths from which data should be ingested."
        readOnly: true
        items:
          type: "string"
      object_count_downloaded:
        type: "integer"
        format: "int64"
        readOnly: true
      object_count_total:
        type: "integer"
        format: "int64"
        readOnly: true
      object_bytes_total:
        type: "integer"
        format: "int64"
        readOnly: true
      object_bytes_downloaded:
        type: "integer"
        format: "int64"
        readOnly: true
  SourceSnowflake:
    type: "object"
    required:
    - "database"
    - "schema"
    - "table_name"
    properties:
      database:
        type: "string"
        example: "NASDAQ"
        description: "Name of the snowflake database."
      schema:
        type: "string"
        example: "PUBLIC"
        description: "Name of the snowflake database schema."
      table_name:
        type: "string"
        example: "COMPANIES"
        description: "Name of the snowflake table."
      warehouse:
        type: "string"
        example: "COMPUTE_XL"
        description: "Name of the data warehouse to be used."
      status:
        description: "Snowflake source status."
        readOnly: true
        $ref: "#/definitions/StatusSnowflake"
  SqlExpression:
    type: "object"
    properties:
      sql:
        type: "string"
        example: "SHA256()"
        description: "The name of a sql function."
  Stats:
    type: "object"
    properties:
      elapsed_time_ms:
        type: "integer"
        format: "int64"
        example: 128
        description: "Total execution time (including time queued) of the query, in\
          \ milliseconds."
      throttled_time_ms:
        type: "integer"
        format: "int64"
        example: 16
        description: "Time query spent queued, in milliseconds."
      result_set_document_count:
        type: "integer"
        format: "int64"
        example: 1235
        description: "Number of documents returned by the query. Only populated if\
          \ `status` is `COMPLETE`."
      result_set_bytes_size:
        type: "integer"
        format: "int64"
        example: 1235
        description: "Number of bytes in the query result set. Only populated if `status`\
          \ is `COMPLETE`. Not populated for INSERT INTO queries."
  Status:
    type: "object"
    properties:
      state:
        type: "string"
        example: "INITIALIZING"
        description: "Status of the Source's ingestion."
        enum:
        - "INITIALIZING"
        - "WATCHING"
        - "PROCESSING"
        - "COMPLETED"
        - "ERROR"
      message:
        type: "string"
        example: "error 403 forbidden"
        description: "State message."
      last_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when source was last processed."
      last_processed_item:
        type: "string"
        example: "/path/to/some/object"
        description: "Last source item processed by ingester."
      total_processed_items:
        type: "integer"
        format: "int64"
        example: 32849023
        description: "Total items processed of source."
      detected_size_bytes:
        type: "integer"
        format: "int64"
        description: "Size in bytes detected for the source at collection initialization.\
          \ This size can be 0 or null for event stream sources."
  StatusAzureEventHubs:
    type: "object"
    properties:
      state:
        type: "string"
        example: "ACTIVE"
        description: "State of the source."
        enum:
        - "NO_DOCS_YET"
        - "ACTIVE"
        - "DORMANT"
      last_consumed_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Time at which the last document was consumed."
      num_documents_processed:
        type: "integer"
        format: "int64"
        example: 1337
        description: "Number of documents consumed."
      partitions:
        type: "array"
        description: "Status info per partition."
        items:
          $ref: "#/definitions/StatusAzureEventHubsPartition"
  StatusAzureEventHubsPartition:
    type: "object"
    properties:
      partition_number:
        type: "integer"
        format: "int32"
        example: 123
        description: "The number of this partition."
      partition_offset:
        type: "integer"
        format: "int64"
        example: 100
        description: "Latest offset of partition."
      offset_lag:
        type: "integer"
        format: "int64"
        example: 10
        description: "Per partition lag for offset."
  StatusAzureServiceBus:
    type: "object"
    properties:
      first_processed_at:
        type: "string"
        example: "2021-08-28T00:23:41Z"
        description: "Service Bus first message processed time in ISO-8601 format."
      records_processed:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of records processed."
      sessions:
        type: "object"
        description: "Sessions processed."
        additionalProperties:
          $ref: "#/definitions/StatusAzureServiceBusSession"
  StatusAzureServiceBusSession:
    type: "object"
    properties:
      sequence_number:
        type: "integer"
        format: "int64"
        example: 323862
        description: "The last processed sequence number within this session."
      last_processed:
        type: "string"
        example: "2022-08-23T00:13:41Z"
        description: "Most recent ISO-8601 date when a message from this session was\
          \ processed."
  StatusDynamoDb:
    type: "object"
    properties:
      scan_start_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "DynamoDB scan start time."
      scan_end_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "DynamoDb scan end time."
      scan_records_processed:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of records inserted using scan."
      scan_total_records:
        type: "integer"
        format: "int64"
        example: 2000
        description: "Number of records in DynamoDB table at time of scan."
      state:
        type: "string"
        example: "SCANNING_TABLE"
        description: "State of current ingest for this table."
        enum:
        - "INITIALIZING"
        - "SCANNING_TABLE"
        - "PROCESSING_STREAM"
      stream_last_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when source was last processed."
  StatusDynamoDbV2:
    type: "object"
    properties:
      initial_dump_completion_percentage:
        type: "number"
        format: "double"
        example: 0.73
      state:
        type: "string"
        example: "PROCESSING_STREAM"
        description: "State of current ingest for this table."
        enum:
        - "INITIALIZING"
        - "SCANNING"
        - "EXPORTING_TO_S3"
        - "DOWNLOADING_FROM_S3"
        - "PROCESSING_STREAM"
      stream_last_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when source was last processed."
  StatusKafka:
    type: "object"
    properties:
      state:
        type: "string"
        example: "ACTIVE"
        description: "State of the Kafka source."
        enum:
        - "NO_DOCS_YET"
        - "ACTIVE"
        - "DORMANT"
      last_consumed_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "Time at which the last document was consumed from Kafka."
      num_documents_processed:
        type: "integer"
        format: "int64"
        example: 1337
        description: "Number of documents consumed by this Kafka topic."
      kafka_partitions:
        type: "array"
        description: "Status info per partition."
        items:
          $ref: "#/definitions/StatusKafkaPartition"
  StatusKafkaPartition:
    type: "object"
    properties:
      partition_number:
        type: "integer"
        format: "int32"
        example: 123
        description: "The number of this partition."
      partition_offset:
        type: "integer"
        format: "int64"
        example: 100
        description: "Latest offset of partition."
      offset_lag:
        type: "integer"
        format: "int64"
        example: 10
        description: "Per partition lag for offset."
  StatusMongoDb:
    type: "object"
    properties:
      scan_start_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "MongoDB scan start time."
      scan_end_time:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "MongoDB scan end time."
      scan_records_processed:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of records inserted using scan."
      scan_total_records:
        type: "integer"
        format: "int64"
        example: 2000
        description: "Number of records in MongoDB table at time of scan."
      state:
        type: "string"
        example: "SCANNING_TABLE"
        description: "State of current ingest for this table."
        enum:
        - "INITIALIZING"
        - "SCANNING_TABLE"
        - "PROCESSING_STREAM"
      stream_last_insert_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when new insert from source was last processed."
      stream_last_update_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when update from source was last processed."
      stream_last_delete_processed_at:
        type: "string"
        example: "2019-01-15T21:48:23Z"
        description: "ISO-8601 date when delete from source was last processed."
      stream_records_inserted:
        type: "integer"
        format: "int64"
        example: 10000
        description: "Number of new records inserted using stream."
      stream_records_updated:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of new records updated using stream."
      stream_records_deleted:
        type: "integer"
        format: "int64"
        example: 100
        description: "Number of new records deleted using stream."
  StatusSnowflake:
    type: "object"
    properties:
      state:
        type: "string"
        example: "EXPORTING_TO_S3"
        description: "State of current ingest for this table."
        enum:
        - "INITIALIZING"
        - "EXPORTING_TO_S3"
        - "DOWNLOADING_FROM_S3"
        - "COMPLETED"
  SuspendVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance that was suspended."
        $ref: "#/definitions/VirtualInstance"
  UnsubscribePreference:
    type: "object"
    required:
    - "notificationType"
    properties:
      notificationType:
        type: "string"
        example: "create_apikey"
        description: "The type of notification to be unsubscribed from."
    description: "Notification preferences for the user."
  UpdateAliasRequest:
    type: "object"
    required:
    - "collections"
    properties:
      description:
        type: "string"
        example: "version alias"
        description: "Optional description."
      collections:
        type: "array"
        example: "[\"commons.foo\", \"prod.demo\"]"
        description: "List of fully qualified collection names referenced by alias."
        items:
          type: "string"
  UpdateApiKeyRequest:
    type: "object"
    properties:
      state:
        type: "string"
        example: "ACTIVE"
        description: "State that the api key should be set to."
        enum:
        - "ACTIVE"
        - "SUSPENDED"
  UpdateApiKeyResponse:
    type: "object"
    properties:
      data:
        description: "The API key that was updated."
        $ref: "#/definitions/ApiKey"
  UpdateQueryLambdaRequest:
    type: "object"
    properties:
      description:
        type: "string"
        example: "production version foo"
        description: "Optional description."
      sql:
        description: "Query Lambda SQL query."
        $ref: "#/definitions/QueryLambdaSql"
      is_public:
        type: "boolean"
  UpdateRoleRequest:
    type: "object"
    properties:
      description:
        type: "string"
        example: "Role with read and write privileges to all collections."
        description: "Description for the role."
      privileges:
        type: "array"
        description: "List of privileges that will be associated with the role."
        items:
          $ref: "#/definitions/Privilege"
  UpdateUnsubscribePreferencesRequest:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of notification preferences."
        items:
          $ref: "#/definitions/UnsubscribePreference"
  UpdateUnsubscribePreferencesResponse:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of notification preferences."
        items:
          $ref: "#/definitions/UnsubscribePreference"
  UpdateUserRequest:
    type: "object"
    properties:
      first_name:
        type: "string"
        example: "John"
        description: "User first name."
      last_name:
        type: "string"
        example: "Doe"
        description: "User last name."
      roles:
        type: "array"
        example: "[\"admin\", \"member\", \"read-only\"]"
        description: "New list of roles for a given user."
        items:
          type: "string"
  UpdateViewRequest:
    type: "object"
    required:
    - "query"
    properties:
      description:
        type: "string"
        example: "view of awesome collection"
        description: "Optional description."
      query:
        type: "string"
        example: "SELECT * FROM foo"
        description: "SQL for this view."
  UpdateViewResponse:
    type: "object"
    properties:
      data:
        description: "View that was updated."
        $ref: "#/definitions/View"
  UpdateVirtualInstanceRequest:
    type: "object"
    properties:
      new_size:
        type: "string"
        example: "LARGE"
        description: "Requested virtual instance size."
        enum:
        - "FREE"
        - "NANO"
        - "SHARED"
        - "MILLI"
        - "SMALL"
        - "MEDIUM"
        - "LARGE"
        - "XLARGE"
        - "XLARGE2"
        - "XLARGE4"
        - "XLARGE8"
        - "XLARGE16"
      monitoring_enabled:
        type: "boolean"
      name:
        type: "string"
        example: "prod_vi"
        description: "New virtual instance name."
      description:
        type: "string"
        example: "VI for prod traffic"
        description: "New virtual instance description."
      auto_suspend_enabled:
        type: "boolean"
        example: true
        description: "Whether auto-suspend should be enabled for this Virtual Instance."
      auto_suspend_seconds:
        type: "integer"
        format: "int32"
        example: 3600
        description: "Number of seconds without queries after which the VI is suspended"
  UpdateVirtualInstanceResponse:
    type: "object"
    properties:
      data:
        description: "Virtual instance that was switched."
        $ref: "#/definitions/VirtualInstance"
  User:
    type: "object"
    required:
    - "email"
    properties:
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      email:
        type: "string"
        example: "hello@rockset.com"
        description: "User email."
      first_name:
        type: "string"
        example: "John"
        description: "User first name."
      last_name:
        type: "string"
        example: "Doe"
        description: "User last name."
      roles:
        type: "array"
        example: "[\"admin\", \"member\", \"read-only\"]"
        description: "List of roles for a given user."
        items:
          type: "string"
      state:
        type: "string"
        example: "ACTIVE"
        description: "State of user - NEW / ACTIVE."
  ValidateQueryResponse:
    type: "object"
    required:
    - "collections"
    - "parameters"
    properties:
      collections:
        type: "array"
        example: "[\"commons.foo\"]"
        description: "List of collections specified in query."
        items:
          type: "string"
      parameters:
        type: "array"
        example: "[\"foo\"]"
        description: "List of parameters specified in query."
        items:
          type: "string"
  View:
    type: "object"
    properties:
      path:
        type: "string"
      name:
        type: "string"
        example: "demo"
        description: "Name of the view."
      description:
        type: "string"
        example: "view referencing collection in workspace"
        description: "View description."
      workspace:
        type: "string"
        example: "commons"
        description: "Name of the workspace."
      creator_email:
        type: "string"
        example: "xyz@rockset.com"
        description: "Email of the creator."
      owner_email:
        type: "string"
        example: "abc@rockset.com"
        description: "Email of the owner, note: deprecated and will always be null."
      query_sql:
        type: "string"
        example: "SELECT * FROM commons.foo"
        description: "SQL query of the view."
      entities:
        type: "array"
        example: "[\"common.foo_view\", \"prod.demo_alias\", \"dev.user_collection\"\
          ]"
        description: "List of entities referenced by view. An entity can be a view,\
          \ alias or collection."
        items:
          type: "string"
      state:
        type: "string"
        example: "CREATED"
        description: "State of the view."
        enum:
        - "CREATED"
        - "SYNCING"
        - "DELETED"
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date."
      modified_at:
        type: "string"
        example: "2001-08-28T00:23:42Z"
        description: "ISO-8601 date."
  VirtualInstance:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "prod_vi"
        description: "Virtual instance name."
      description:
        type: "string"
        example: "VI for prod traffic"
        description: "Virtual instance description."
      created_by:
        type: "string"
        example: "hello@rockset.com"
        description: "Creator of requested virtual instance."
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when virtual instance was created."
      resumed_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when virtual instance was created."
      state:
        type: "string"
        example: "ACTIVE"
        description: "Virtual instance state."
        enum:
        - "INITIALIZING"
        - "PROVISIONING_RESOURCES"
        - "REBALANCING_COLLECTIONS"
        - "ACTIVE"
        - "SUSPENDING"
        - "SUSPENDED"
        - "RESUMING"
        - "DELETED"
      current_size:
        type: "string"
        example: "MEDIUM"
        description: "Virtual instance current size."
        readOnly: true
        enum:
        - "FREE"
        - "NANO"
        - "SHARED"
        - "MILLI"
        - "SMALL"
        - "MEDIUM"
        - "LARGE"
        - "XLARGE"
        - "XLARGE2"
        - "XLARGE4"
        - "XLARGE8"
        - "XLARGE16"
      desired_size:
        type: "string"
        example: "MEDIUM"
        description: "Virtual instance desired size."
        readOnly: true
        enum:
        - "FREE"
        - "NANO"
        - "SHARED"
        - "MILLI"
        - "SMALL"
        - "MEDIUM"
        - "LARGE"
        - "XLARGE"
        - "XLARGE2"
        - "XLARGE4"
        - "XLARGE8"
        - "XLARGE16"
      monitoring_enabled:
        type: "boolean"
      default_vi:
        type: "boolean"
      default_pod_count:
        type: "integer"
        format: "int32"
      scaled_pod_count:
        type: "integer"
        format: "int32"
      id:
        type: "string"
        example: "123e4567-e89b-12d3-a456-556642440000"
        description: "Unique identifier for virtual instance."
      rrn:
        type: "string"
        example: "rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000"
        description: "Virtual Instance RRN."
      auto_suspend_seconds:
        type: "integer"
        format: "int32"
        example: 3600
        description: "Number of seconds without queries after which the VI is suspended"
      stats:
        description: "Stats about this VirtualInstance"
        $ref: "#/definitions/VirtualInstanceStats"
  VirtualInstanceStats:
    type: "object"
    properties:
      last_queried_ms:
        type: "integer"
        format: "int64"
        example: 1535101119334
        description: "Milliseconds since Unix epoch Jan 1, 1970."
  Workspace:
    type: "object"
    properties:
      created_at:
        type: "string"
        example: "2001-08-28T00:23:41Z"
        description: "ISO-8601 date of when workspace was created."
      created_by:
        type: "string"
        example: "hello@rockset.com"
        description: "Email of user who created the workspace."
      name:
        type: "string"
        example: "event_logs"
        description: "Descriptive label and unique identifier."
      description:
        type: "string"
        example: "Datasets of system logs for the ops team."
        description: "Longer explanation for the workspace."
      collection_count:
        type: "integer"
        format: "int64"
        example: 3
        description: "Number of collections that are immediate children of workspace."
    description: "Workspaces are organizational containers for collections."
  XmlParams:
    type: "object"
    properties:
      root_tag:
        type: "string"
        example: "root"
        description: "Tag until which xml is ignored."
      encoding:
        type: "string"
        example: "UTF-8"
        description: "Encoding in which data source is encoded."
      doc_tag:
        type: "string"
        example: "row"
        description: "Tags with which documents are identified."
      value_tag:
        type: "string"
        example: "value"
        description: "tag used for the value when there are attributes in the element\
          \ having no child"
      attribute_prefix:
        type: "string"
        example: "_attr"
        description: "Tag to differentiate between attributes and elements."
